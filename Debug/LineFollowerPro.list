
LineFollowerPro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004038  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080041c0  080041c0  000141c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041f0  080041f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080041f0  080041f0  000141f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041f8  080041f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041f8  080041f8  000141f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041fc  080041fc  000141fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  2000000c  0800420c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  0800420c  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa36  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a02  00000000  00000000  0002aa72  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ac0  00000000  00000000  0002c478  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009d8  00000000  00000000  0002cf38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000208e3  00000000  00000000  0002d910  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000089c9  00000000  00000000  0004e1f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c800e  00000000  00000000  00056bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011ebca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c04  00000000  00000000  0011ec48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080041a8 	.word	0x080041a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080041a8 	.word	0x080041a8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80004ce:	463b      	mov	r3, r7
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004da:	4b21      	ldr	r3, [pc, #132]	; (8000560 <MX_ADC1_Init+0x98>)
 80004dc:	4a21      	ldr	r2, [pc, #132]	; (8000564 <MX_ADC1_Init+0x9c>)
 80004de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004e0:	4b1f      	ldr	r3, [pc, #124]	; (8000560 <MX_ADC1_Init+0x98>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e6:	4b1e      	ldr	r3, [pc, #120]	; (8000560 <MX_ADC1_Init+0x98>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004ec:	4b1c      	ldr	r3, [pc, #112]	; (8000560 <MX_ADC1_Init+0x98>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004f2:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <MX_ADC1_Init+0x98>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f8:	4b19      	ldr	r3, [pc, #100]	; (8000560 <MX_ADC1_Init+0x98>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000500:	4b17      	ldr	r3, [pc, #92]	; (8000560 <MX_ADC1_Init+0x98>)
 8000502:	2200      	movs	r2, #0
 8000504:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000506:	4b16      	ldr	r3, [pc, #88]	; (8000560 <MX_ADC1_Init+0x98>)
 8000508:	4a17      	ldr	r2, [pc, #92]	; (8000568 <MX_ADC1_Init+0xa0>)
 800050a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800050c:	4b14      	ldr	r3, [pc, #80]	; (8000560 <MX_ADC1_Init+0x98>)
 800050e:	2200      	movs	r2, #0
 8000510:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000512:	4b13      	ldr	r3, [pc, #76]	; (8000560 <MX_ADC1_Init+0x98>)
 8000514:	2201      	movs	r2, #1
 8000516:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000518:	4b11      	ldr	r3, [pc, #68]	; (8000560 <MX_ADC1_Init+0x98>)
 800051a:	2200      	movs	r2, #0
 800051c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000520:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <MX_ADC1_Init+0x98>)
 8000522:	2201      	movs	r2, #1
 8000524:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000526:	480e      	ldr	r0, [pc, #56]	; (8000560 <MX_ADC1_Init+0x98>)
 8000528:	f001 fa08 	bl	800193c <HAL_ADC_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000532:	f000 fe83 	bl	800123c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000536:	2301      	movs	r3, #1
 8000538:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800053a:	2301      	movs	r3, #1
 800053c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800053e:	2300      	movs	r3, #0
 8000540:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000542:	463b      	mov	r3, r7
 8000544:	4619      	mov	r1, r3
 8000546:	4806      	ldr	r0, [pc, #24]	; (8000560 <MX_ADC1_Init+0x98>)
 8000548:	f001 fbc6 	bl	8001cd8 <HAL_ADC_ConfigChannel>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000552:	f000 fe73 	bl	800123c <Error_Handler>
  }

}
 8000556:	bf00      	nop
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000028 	.word	0x20000028
 8000564:	40012000 	.word	0x40012000
 8000568:	0f000001 	.word	0x0f000001

0800056c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a17      	ldr	r2, [pc, #92]	; (80005e8 <HAL_ADC_MspInit+0x7c>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d127      	bne.n	80005de <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	4b16      	ldr	r3, [pc, #88]	; (80005ec <HAL_ADC_MspInit+0x80>)
 8000594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000596:	4a15      	ldr	r2, [pc, #84]	; (80005ec <HAL_ADC_MspInit+0x80>)
 8000598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800059c:	6453      	str	r3, [r2, #68]	; 0x44
 800059e:	4b13      	ldr	r3, [pc, #76]	; (80005ec <HAL_ADC_MspInit+0x80>)
 80005a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <HAL_ADC_MspInit+0x80>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a0e      	ldr	r2, [pc, #56]	; (80005ec <HAL_ADC_MspInit+0x80>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <HAL_ADC_MspInit+0x80>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005c6:	2302      	movs	r3, #2
 80005c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ca:	2303      	movs	r3, #3
 80005cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4619      	mov	r1, r3
 80005d8:	4805      	ldr	r0, [pc, #20]	; (80005f0 <HAL_ADC_MspInit+0x84>)
 80005da:	f001 fead 	bl	8002338 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005de:	bf00      	nop
 80005e0:	3728      	adds	r7, #40	; 0x28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40012000 	.word	0x40012000
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40020000 	.word	0x40020000

080005f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
 800060e:	4b41      	ldr	r3, [pc, #260]	; (8000714 <MX_GPIO_Init+0x120>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a40      	ldr	r2, [pc, #256]	; (8000714 <MX_GPIO_Init+0x120>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b3e      	ldr	r3, [pc, #248]	; (8000714 <MX_GPIO_Init+0x120>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	4b3a      	ldr	r3, [pc, #232]	; (8000714 <MX_GPIO_Init+0x120>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a39      	ldr	r2, [pc, #228]	; (8000714 <MX_GPIO_Init+0x120>)
 8000630:	f043 0304 	orr.w	r3, r3, #4
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b37      	ldr	r3, [pc, #220]	; (8000714 <MX_GPIO_Init+0x120>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	4b33      	ldr	r3, [pc, #204]	; (8000714 <MX_GPIO_Init+0x120>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a32      	ldr	r2, [pc, #200]	; (8000714 <MX_GPIO_Init+0x120>)
 800064c:	f043 0302 	orr.w	r3, r3, #2
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b30      	ldr	r3, [pc, #192]	; (8000714 <MX_GPIO_Init+0x120>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	4b2c      	ldr	r3, [pc, #176]	; (8000714 <MX_GPIO_Init+0x120>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a2b      	ldr	r2, [pc, #172]	; (8000714 <MX_GPIO_Init+0x120>)
 8000668:	f043 0310 	orr.w	r3, r3, #16
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b29      	ldr	r3, [pc, #164]	; (8000714 <MX_GPIO_Init+0x120>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0310 	and.w	r3, r3, #16
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	4b25      	ldr	r3, [pc, #148]	; (8000714 <MX_GPIO_Init+0x120>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a24      	ldr	r2, [pc, #144]	; (8000714 <MX_GPIO_Init+0x120>)
 8000684:	f043 0308 	orr.w	r3, r3, #8
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b22      	ldr	r3, [pc, #136]	; (8000714 <MX_GPIO_Init+0x120>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0308 	and.w	r3, r3, #8
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIS_A_Pin|DIR_A_Pin, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	2130      	movs	r1, #48	; 0x30
 800069a:	481f      	ldr	r0, [pc, #124]	; (8000718 <MX_GPIO_Init+0x124>)
 800069c:	f001 ffe6 	bl	800266c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIS_B_Pin|DIR_B_Pin, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2103      	movs	r1, #3
 80006a4:	481d      	ldr	r0, [pc, #116]	; (800071c <MX_GPIO_Init+0x128>)
 80006a6:	f001 ffe1 	bl	800266c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, S0_Pin|S1_Pin|S3_Pin|S2_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 80006b0:	481b      	ldr	r0, [pc, #108]	; (8000720 <MX_GPIO_Init+0x12c>)
 80006b2:	f001 ffdb 	bl	800266c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DIS_A_Pin|DIR_A_Pin;
 80006b6:	2330      	movs	r3, #48	; 0x30
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80006c2:	2301      	movs	r3, #1
 80006c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	4619      	mov	r1, r3
 80006cc:	4812      	ldr	r0, [pc, #72]	; (8000718 <MX_GPIO_Init+0x124>)
 80006ce:	f001 fe33 	bl	8002338 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIS_B_Pin|DIR_B_Pin;
 80006d2:	2303      	movs	r3, #3
 80006d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d6:	2301      	movs	r3, #1
 80006d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80006de:	2301      	movs	r3, #1
 80006e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	4619      	mov	r1, r3
 80006e8:	480c      	ldr	r0, [pc, #48]	; (800071c <MX_GPIO_Init+0x128>)
 80006ea:	f001 fe25 	bl	8002338 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S3_Pin|S2_Pin;
 80006ee:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80006f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80006fc:	2301      	movs	r3, #1
 80006fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	4619      	mov	r1, r3
 8000706:	4806      	ldr	r0, [pc, #24]	; (8000720 <MX_GPIO_Init+0x12c>)
 8000708:	f001 fe16 	bl	8002338 <HAL_GPIO_Init>

}
 800070c:	bf00      	nop
 800070e:	3728      	adds	r7, #40	; 0x28
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40020800 	.word	0x40020800
 800071c:	40020400 	.word	0x40020400
 8000720:	40021000 	.word	0x40021000

08000724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000728:	f001 f874 	bl	8001814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072c:	f000 f848 	bl	80007c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000730:	f7ff ff60 	bl	80005f4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000734:	f7ff fec8 	bl	80004c8 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000738:	f000 fe6e 	bl	8001418 <MX_TIM3_Init>
  MX_TIM4_Init();
 800073c:	f000 feee 	bl	800151c <MX_TIM4_Init>
  MX_TIM2_Init();
 8000740:	f000 fdfa 	bl	8001338 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  Init_Control_NEC(&NEC_IR);
 8000744:	4817      	ldr	r0, [pc, #92]	; (80007a4 <main+0x80>)
 8000746:	f000 f8f7 	bl	8000938 <Init_Control_NEC>
  Init_Line_Follower(&LF);
 800074a:	4817      	ldr	r0, [pc, #92]	; (80007a8 <main+0x84>)
 800074c:	f000 f896 	bl	800087c <Init_Line_Follower>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000750:	2100      	movs	r1, #0
 8000752:	4816      	ldr	r0, [pc, #88]	; (80007ac <main+0x88>)
 8000754:	f002 fc0c 	bl	8002f70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000758:	2104      	movs	r1, #4
 800075a:	4814      	ldr	r0, [pc, #80]	; (80007ac <main+0x88>)
 800075c:	f002 fc08 	bl	8002f70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000760:	2100      	movs	r1, #0
 8000762:	4813      	ldr	r0, [pc, #76]	; (80007b0 <main+0x8c>)
 8000764:	f002 fc04 	bl	8002f70 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOC, DIS_A_Pin,GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	2110      	movs	r1, #16
 800076c:	4811      	ldr	r0, [pc, #68]	; (80007b4 <main+0x90>)
 800076e:	f001 ff7d 	bl	800266c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DIS_B_Pin,GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2101      	movs	r1, #1
 8000776:	4810      	ldr	r0, [pc, #64]	; (80007b8 <main+0x94>)
 8000778:	f001 ff78 	bl	800266c <HAL_GPIO_WritePin>
  Turbine(12);
 800077c:	200c      	movs	r0, #12
 800077e:	f000 fb7b 	bl	8000e78 <Turbine>
  HAL_Delay(8000);
 8000782:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000786:	f001 f8b7 	bl	80018f8 <HAL_Delay>
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 800078a:	2100      	movs	r1, #0
 800078c:	480b      	ldr	r0, [pc, #44]	; (80007bc <main+0x98>)
 800078e:	f002 fc63 	bl	8003058 <HAL_TIM_IC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Turn_on_off(&NEC_IR,&LF);
 8000792:	4905      	ldr	r1, [pc, #20]	; (80007a8 <main+0x84>)
 8000794:	4803      	ldr	r0, [pc, #12]	; (80007a4 <main+0x80>)
 8000796:	f000 fc0b 	bl	8000fb0 <Turn_on_off>
	  Line_follower_state_machine(&LF);
 800079a:	4803      	ldr	r0, [pc, #12]	; (80007a8 <main+0x84>)
 800079c:	f000 fc7a 	bl	8001094 <Line_follower_state_machine>
	  Turn_on_off(&NEC_IR,&LF);
 80007a0:	e7f7      	b.n	8000792 <main+0x6e>
 80007a2:	bf00      	nop
 80007a4:	200000f8 	.word	0x200000f8
 80007a8:	20000070 	.word	0x20000070
 80007ac:	2000014c 	.word	0x2000014c
 80007b0:	2000010c 	.word	0x2000010c
 80007b4:	40020800 	.word	0x40020800
 80007b8:	40020400 	.word	0x40020400
 80007bc:	2000018c 	.word	0x2000018c

080007c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b094      	sub	sp, #80	; 0x50
 80007c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	f107 0320 	add.w	r3, r7, #32
 80007ca:	2230      	movs	r2, #48	; 0x30
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f003 fce2 	bl	8004198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	4b22      	ldr	r3, [pc, #136]	; (8000874 <SystemClock_Config+0xb4>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	4a21      	ldr	r2, [pc, #132]	; (8000874 <SystemClock_Config+0xb4>)
 80007ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f2:	6413      	str	r3, [r2, #64]	; 0x40
 80007f4:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <SystemClock_Config+0xb4>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <SystemClock_Config+0xb8>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a1b      	ldr	r2, [pc, #108]	; (8000878 <SystemClock_Config+0xb8>)
 800080a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080e:	6013      	str	r3, [r2, #0]
 8000810:	4b19      	ldr	r3, [pc, #100]	; (8000878 <SystemClock_Config+0xb8>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800081c:	2302      	movs	r3, #2
 800081e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000820:	2301      	movs	r3, #1
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000824:	2310      	movs	r3, #16
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000828:	2300      	movs	r3, #0
 800082a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082c:	f107 0320 	add.w	r3, r7, #32
 8000830:	4618      	mov	r0, r3
 8000832:	f001 ff35 	bl	80026a0 <HAL_RCC_OscConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800083c:	f000 fcfe 	bl	800123c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000840:	230f      	movs	r3, #15
 8000842:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000844:	2300      	movs	r3, #0
 8000846:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f002 f990 	bl	8002b80 <HAL_RCC_ClockConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000866:	f000 fce9 	bl	800123c <Error_Handler>
  }
}
 800086a:	bf00      	nop
 800086c:	3750      	adds	r7, #80	; 0x50
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800
 8000878:	40007000 	.word	0x40007000

0800087c <Init_Line_Follower>:

/* USER CODE BEGIN 4 */
void Init_Line_Follower(struct Line_Follower* lf)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	lf->track_background_color = white;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2201      	movs	r2, #1
 8000888:	601a      	str	r2, [r3, #0]
	for(int i=0;i<16;i++)
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	e008      	b.n	80008a2 <Init_Line_Follower+0x26>
		lf->sensors_qtr[i] = 0;
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	4413      	add	r3, r2
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
	for(int i=0;i<16;i++)
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	3301      	adds	r3, #1
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	2b0f      	cmp	r3, #15
 80008a6:	ddf3      	ble.n	8000890 <Init_Line_Follower+0x14>
	lf->speed_left = 0;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2200      	movs	r2, #0
 80008ac:	645a      	str	r2, [r3, #68]	; 0x44
	lf->speed_right = 0;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2200      	movs	r2, #0
 80008b2:	649a      	str	r2, [r3, #72]	; 0x48
	lf->MAX_SPEED = 499;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f240 12f3 	movw	r2, #499	; 0x1f3
 80008ba:	64da      	str	r2, [r3, #76]	; 0x4c
	lf->MED_SPEED = 345;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f240 1259 	movw	r2, #345	; 0x159
 80008c2:	651a      	str	r2, [r3, #80]	; 0x50
	lf->state = HOME;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2200      	movs	r2, #0
 80008c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	lf->out_state = CENTER;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2200      	movs	r2, #0
 80008d0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	lf->PID.U = 0;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2200      	movs	r2, #0
 80008d8:	659a      	str	r2, [r3, #88]	; 0x58
	lf->PID.KP = 61.2444;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a14      	ldr	r2, [pc, #80]	; (8000930 <Init_Line_Follower+0xb4>)
 80008de:	65da      	str	r2, [r3, #92]	; 0x5c
	lf->PID.KD = 168.4224;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a14      	ldr	r2, [pc, #80]	; (8000934 <Init_Line_Follower+0xb8>)
 80008e4:	661a      	str	r2, [r3, #96]	; 0x60
	lf->PID.KI = 1.0;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80008ec:	665a      	str	r2, [r3, #100]	; 0x64
	lf->PID.error_now = 0.0;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f04f 0200 	mov.w	r2, #0
 80008f4:	669a      	str	r2, [r3, #104]	; 0x68
	for(int i=0;i<6;i++)
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	e00b      	b.n	8000914 <Init_Line_Follower+0x98>
		lf->PID.error_last[i] = 0.0;
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	331a      	adds	r3, #26
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	4413      	add	r3, r2
 8000906:	3304      	adds	r3, #4
 8000908:	f04f 0200 	mov.w	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
	for(int i=0;i<6;i++)
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	3301      	adds	r3, #1
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	2b05      	cmp	r3, #5
 8000918:	ddf0      	ble.n	80008fc <Init_Line_Follower+0x80>
	lf->PID.sum_errors = 0.0;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f04f 0200 	mov.w	r2, #0
 8000920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8000924:	bf00      	nop
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	4274fa44 	.word	0x4274fa44
 8000934:	43286c22 	.word	0x43286c22

08000938 <Init_Control_NEC>:
//-----------------------------------------------------------------------
void Init_Control_NEC(struct Control_NEC* nec)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	nec->input_capture = 0;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
	nec->input_diference = 0;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2200      	movs	r2, #0
 800094a:	605a      	str	r2, [r3, #4]
	nec->input_last = 0;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
	nec->data = 0;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
	nec->sample = 0;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2200      	movs	r2, #0
 800095c:	741a      	strb	r2, [r3, #16]
	nec->state = START;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2200      	movs	r2, #0
 8000962:	745a      	strb	r2, [r3, #17]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <Read_adc>:
//---------------------------------------------------------------------
int Read_adc(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
	int sensor_value = 4095;
 8000976:	f640 73ff 	movw	r3, #4095	; 0xfff
 800097a:	607b      	str	r3, [r7, #4]
	HAL_ADC_Start(&hadc1);
 800097c:	480b      	ldr	r0, [pc, #44]	; (80009ac <Read_adc+0x3c>)
 800097e:	f001 f821 	bl	80019c4 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1,5) == HAL_OK)
 8000982:	2105      	movs	r1, #5
 8000984:	4809      	ldr	r0, [pc, #36]	; (80009ac <Read_adc+0x3c>)
 8000986:	f001 f916 	bl	8001bb6 <HAL_ADC_PollForConversion>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d104      	bne.n	800099a <Read_adc+0x2a>
		sensor_value  = (int)(HAL_ADC_GetValue(&hadc1));
 8000990:	4806      	ldr	r0, [pc, #24]	; (80009ac <Read_adc+0x3c>)
 8000992:	f001 f994 	bl	8001cbe <HAL_ADC_GetValue>
 8000996:	4603      	mov	r3, r0
 8000998:	607b      	str	r3, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 800099a:	4804      	ldr	r0, [pc, #16]	; (80009ac <Read_adc+0x3c>)
 800099c:	f001 f8d8 	bl	8001b50 <HAL_ADC_Stop>
	return sensor_value;
 80009a0:	687b      	ldr	r3, [r7, #4]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000028 	.word	0x20000028

080009b0 <Read_sensors_qtr>:
//---------------------------------------------------------------------
void Read_sensors_qtr(struct Line_Follower* lf)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	for(int i = 0;i<16;i++)
 80009b8:	2300      	movs	r3, #0
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	e035      	b.n	8000a2a <Read_sensors_qtr+0x7a>
	{
		HAL_GPIO_WritePin(GPIOE, S0_Pin, i & 0x01);
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	461a      	mov	r2, r3
 80009ca:	2180      	movs	r1, #128	; 0x80
 80009cc:	481a      	ldr	r0, [pc, #104]	; (8000a38 <Read_sensors_qtr+0x88>)
 80009ce:	f001 fe4d 	bl	800266c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, S1_Pin, i & 0x02);
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	461a      	mov	r2, r3
 80009de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e2:	4815      	ldr	r0, [pc, #84]	; (8000a38 <Read_sensors_qtr+0x88>)
 80009e4:	f001 fe42 	bl	800266c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, S2_Pin, i & 0x04);
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	f003 0304 	and.w	r3, r3, #4
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	461a      	mov	r2, r3
 80009f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009f8:	480f      	ldr	r0, [pc, #60]	; (8000a38 <Read_sensors_qtr+0x88>)
 80009fa:	f001 fe37 	bl	800266c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, S3_Pin, i & 0x08);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	f003 0308 	and.w	r3, r3, #8
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	461a      	mov	r2, r3
 8000a0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a0e:	480a      	ldr	r0, [pc, #40]	; (8000a38 <Read_sensors_qtr+0x88>)
 8000a10:	f001 fe2c 	bl	800266c <HAL_GPIO_WritePin>
		lf->sensors_qtr[i] = Read_adc();
 8000a14:	f7ff ffac 	bl	8000970 <Read_adc>
 8000a18:	4601      	mov	r1, r0
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	4413      	add	r3, r2
 8000a22:	6059      	str	r1, [r3, #4]
	for(int i = 0;i<16;i++)
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	3301      	adds	r3, #1
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	ddc6      	ble.n	80009be <Read_sensors_qtr+0xe>
	}
}
 8000a30:	bf00      	nop
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40021000 	.word	0x40021000

08000a3c <Get_error>:
//---------------------------------------------------------------------
void Get_error(struct Line_Follower* lf)
{
 8000a3c:	b5b0      	push	{r4, r5, r7, lr}
 8000a3e:	b0a6      	sub	sp, #152	; 0x98
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	int max;
	int min;
	int threshold;
	int range;
	int bit_sensor[16];
	int sum = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	int weigth[8] = {8,7,6,5,4,3,2,1};
 8000a4a:	4bbf      	ldr	r3, [pc, #764]	; (8000d48 <Get_error+0x30c>)
 8000a4c:	f107 040c 	add.w	r4, r7, #12
 8000a50:	461d      	mov	r5, r3
 8000a52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a56:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int errorLeft = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	int errorRight = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	//Read samples from each sensor
	Read_sensors_qtr(lf);
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff ffa0 	bl	80009b0 <Read_sensors_qtr>
	max = min = lf->sensors_qtr[0];
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000a78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000a7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	for(int i=1;i<16;i++)
 8000a80:	2301      	movs	r3, #1
 8000a82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000a86:	e028      	b.n	8000ada <Get_error+0x9e>
	{
		if(lf->sensors_qtr[i]> max)
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	4413      	add	r3, r2
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	da07      	bge.n	8000aac <Get_error+0x70>
			max = lf->sensors_qtr[i];
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	4413      	add	r3, r2
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		if(lf->sensors_qtr[i] < min)
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	4413      	add	r3, r2
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000abc:	429a      	cmp	r2, r3
 8000abe:	dd07      	ble.n	8000ad0 <Get_error+0x94>
			min = lf->sensors_qtr[i];
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	4413      	add	r3, r2
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	for(int i=1;i<16;i++)
 8000ad0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000ada:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ade:	2b0f      	cmp	r3, #15
 8000ae0:	ddd2      	ble.n	8000a88 <Get_error+0x4c>
	}
	range = max-min;
 8000ae2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000ae6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	673b      	str	r3, [r7, #112]	; 0x70
	if(range > 400)
 8000aee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000af0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000af4:	f340 8120 	ble.w	8000d38 <Get_error+0x2fc>
	{
		threshold = (range/2)+min;
 8000af8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000afa:	0fda      	lsrs	r2, r3, #31
 8000afc:	4413      	add	r3, r2
 8000afe:	105b      	asrs	r3, r3, #1
 8000b00:	461a      	mov	r2, r3
 8000b02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000b06:	4413      	add	r3, r2
 8000b08:	66fb      	str	r3, [r7, #108]	; 0x6c
		for(int i=0;i<16;i++)
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000b0e:	e02d      	b.n	8000b6c <Get_error+0x130>
		{
			if(lf->track_background_color)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d013      	beq.n	8000b40 <Get_error+0x104>
				bit_sensor[i] = (lf->sensors_qtr[i] < threshold) ? 1 : 0;
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	4413      	add	r3, r2
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000b24:	429a      	cmp	r2, r3
 8000b26:	bfcc      	ite	gt
 8000b28:	2301      	movgt	r3, #1
 8000b2a:	2300      	movle	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8000b38:	440b      	add	r3, r1
 8000b3a:	f843 2c6c 	str.w	r2, [r3, #-108]
 8000b3e:	e012      	b.n	8000b66 <Get_error+0x12a>
			else
				bit_sensor[i] = (lf->sensors_qtr[i] > threshold) ? 1 : 0;
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	4413      	add	r3, r2
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	bfb4      	ite	lt
 8000b50:	2301      	movlt	r3, #1
 8000b52:	2300      	movge	r3, #0
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	461a      	mov	r2, r3
 8000b58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8000b60:	440b      	add	r3, r1
 8000b62:	f843 2c6c 	str.w	r2, [r3, #-108]
		for(int i=0;i<16;i++)
 8000b66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b68:	3301      	adds	r3, #1
 8000b6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000b6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b6e:	2b0f      	cmp	r3, #15
 8000b70:	ddce      	ble.n	8000b10 <Get_error+0xd4>
		}
		for(int i=0;i<8;i++)
 8000b72:	2300      	movs	r3, #0
 8000b74:	67bb      	str	r3, [r7, #120]	; 0x78
 8000b76:	e02e      	b.n	8000bd6 <Get_error+0x19a>
		{
			errorLeft += bit_sensor[i]*weigth[i];
 8000b78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000b80:	4413      	add	r3, r2
 8000b82:	f853 2c6c 	ldr.w	r2, [r3, #-108]
 8000b86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8000b8e:	440b      	add	r3, r1
 8000b90:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8000b94:	fb03 f302 	mul.w	r3, r3, r2
 8000b98:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000b9c:	4413      	add	r3, r2
 8000b9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			errorRight += bit_sensor[15-i]*weigth[i];
 8000ba2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ba4:	f1c3 030f 	rsb	r3, r3, #15
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000bae:	4413      	add	r3, r2
 8000bb0:	f853 2c6c 	ldr.w	r2, [r3, #-108]
 8000bb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8000bbc:	440b      	add	r3, r1
 8000bbe:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8000bc2:	fb03 f302 	mul.w	r3, r3, r2
 8000bc6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000bca:	4413      	add	r3, r2
 8000bcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		for(int i=0;i<8;i++)
 8000bd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8000bd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000bd8:	2b07      	cmp	r3, #7
 8000bda:	ddcd      	ble.n	8000b78 <Get_error+0x13c>
		}
		for(int i=0;i<16;i++)
 8000bdc:	2300      	movs	r3, #0
 8000bde:	677b      	str	r3, [r7, #116]	; 0x74
 8000be0:	e00e      	b.n	8000c00 <Get_error+0x1c4>
			sum += bit_sensor[i];
 8000be2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000bea:	4413      	add	r3, r2
 8000bec:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8000bf0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000bf4:	4413      	add	r3, r2
 8000bf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		for(int i=0;i<16;i++)
 8000bfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	677b      	str	r3, [r7, #116]	; 0x74
 8000c00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c02:	2b0f      	cmp	r3, #15
 8000c04:	dded      	ble.n	8000be2 <Get_error+0x1a6>
		lf->PID.error_now = (float)(errorRight-errorLeft)/(float)(sum);
 8000c06:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000c0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000c0e:	1ad3      	subs	r3, r2, r3
 8000c10:	ee07 3a90 	vmov	s15, r3
 8000c14:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c1c:	ee07 3a90 	vmov	s15, r3
 8000c20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		lf->out_state = ((lf->PID.error_now <= 2.5)&&(lf->PID.error_now >=(0-2.5)))  ? CENTER : lf->out_state;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8000c34:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8000c38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c40:	bf94      	ite	ls
 8000c42:	2301      	movls	r3, #1
 8000c44:	2300      	movhi	r3, #0
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	f083 0301 	eor.w	r3, r3, #1
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d111      	bne.n	8000c76 <Get_error+0x23a>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8000c58:	eeb8 7a04 	vmov.f32	s14, #132	; 0xc0200000 -2.5
 8000c5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c64:	bfac      	ite	ge
 8000c66:	2301      	movge	r3, #1
 8000c68:	2300      	movlt	r3, #0
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	f083 0301 	eor.w	r3, r3, #1
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d003      	beq.n	8000c7e <Get_error+0x242>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8000c7c:	e000      	b.n	8000c80 <Get_error+0x244>
 8000c7e:	2200      	movs	r2, #0
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		lf->out_state = ((lf->PID.error_now > 2.5)&&(lf->PID.error_now <=8.0))        ?  RIGHT: lf->out_state;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8000c8c:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8000c90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c98:	bfcc      	ite	gt
 8000c9a:	2301      	movgt	r3, #1
 8000c9c:	2300      	movle	r3, #0
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	f083 0301 	eor.w	r3, r3, #1
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d111      	bne.n	8000cce <Get_error+0x292>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8000cb0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000cb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cbc:	bf94      	ite	ls
 8000cbe:	2301      	movls	r3, #1
 8000cc0:	2300      	movhi	r3, #0
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	f083 0301 	eor.w	r3, r3, #1
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d003      	beq.n	8000cd6 <Get_error+0x29a>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8000cd4:	e000      	b.n	8000cd8 <Get_error+0x29c>
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
        lf->out_state = ((lf->PID.error_now <(0-2.5))&&(lf->PID.error_now >=(0-8.0))) ? LEFT: lf->out_state;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8000ce4:	eeb8 7a04 	vmov.f32	s14, #132	; 0xc0200000 -2.5
 8000ce8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf0:	bf4c      	ite	mi
 8000cf2:	2301      	movmi	r3, #1
 8000cf4:	2300      	movpl	r3, #0
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	f083 0301 	eor.w	r3, r3, #1
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d111      	bne.n	8000d26 <Get_error+0x2ea>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8000d08:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8000d0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d14:	bfac      	ite	ge
 8000d16:	2301      	movge	r3, #1
 8000d18:	2300      	movlt	r3, #0
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	f083 0301 	eor.w	r3, r3, #1
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d003      	beq.n	8000d2e <Get_error+0x2f2>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8000d2c:	e000      	b.n	8000d30 <Get_error+0x2f4>
 8000d2e:	2202      	movs	r2, #2
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	}
	else
		lf->PID.error_now =  OUT_LINE;
}
 8000d36:	e002      	b.n	8000d3e <Get_error+0x302>
		lf->PID.error_now =  OUT_LINE;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <Get_error+0x310>)
 8000d3c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8000d3e:	bf00      	nop
 8000d40:	3798      	adds	r7, #152	; 0x98
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bdb0      	pop	{r4, r5, r7, pc}
 8000d46:	bf00      	nop
 8000d48:	080041c0 	.word	0x080041c0
 8000d4c:	42c80000 	.word	0x42c80000

08000d50 <Motor_left>:

//---------------------------------------------------------------------
void Motor_left(struct Line_Follower* lf)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	if(!lf->speed_left)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d109      	bne.n	8000d74 <Motor_left+0x24>
	{
		HAL_GPIO_WritePin(GPIOC, DIR_A_Pin,GPIO_PIN_RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2120      	movs	r1, #32
 8000d64:	481d      	ldr	r0, [pc, #116]	; (8000ddc <Motor_left+0x8c>)
 8000d66:	f001 fc81 	bl	800266c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,0);
 8000d6a:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <Motor_left+0x90>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	635a      	str	r2, [r3, #52]	; 0x34
			lf->speed_left = (lf->speed_left >= lf->MAX_SPEED) ? lf->MAX_SPEED : lf->speed_left;
			HAL_GPIO_WritePin(GPIOC, DIR_A_Pin,GPIO_PIN_SET);
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,lf->speed_left );
      }
   }
   return;
 8000d72:	e030      	b.n	8000dd6 <Motor_left+0x86>
		if (lf->speed_left >=1)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	dd13      	ble.n	8000da4 <Motor_left+0x54>
			lf->speed_left = (lf->speed_left  >= lf->MAX_SPEED) ? lf->MAX_SPEED : lf->speed_left;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d84:	429a      	cmp	r2, r3
 8000d86:	bfa8      	it	ge
 8000d88:	461a      	movge	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	645a      	str	r2, [r3, #68]	; 0x44
			HAL_GPIO_WritePin(GPIOC, DIR_A_Pin,GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2120      	movs	r1, #32
 8000d92:	4812      	ldr	r0, [pc, #72]	; (8000ddc <Motor_left+0x8c>)
 8000d94:	f001 fc6a 	bl	800266c <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,lf->speed_left);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d9c:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <Motor_left+0x90>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	635a      	str	r2, [r3, #52]	; 0x34
   return;
 8000da2:	e018      	b.n	8000dd6 <Motor_left+0x86>
			lf->speed_left *= (0-1);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da8:	425a      	negs	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	645a      	str	r2, [r3, #68]	; 0x44
			lf->speed_left = (lf->speed_left >= lf->MAX_SPEED) ? lf->MAX_SPEED : lf->speed_left;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	429a      	cmp	r2, r3
 8000db8:	bfa8      	it	ge
 8000dba:	461a      	movge	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	645a      	str	r2, [r3, #68]	; 0x44
			HAL_GPIO_WritePin(GPIOC, DIR_A_Pin,GPIO_PIN_SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2120      	movs	r1, #32
 8000dc4:	4805      	ldr	r0, [pc, #20]	; (8000ddc <Motor_left+0x8c>)
 8000dc6:	f001 fc51 	bl	800266c <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,lf->speed_left );
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000dce:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <Motor_left+0x90>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	635a      	str	r2, [r3, #52]	; 0x34
   return;
 8000dd4:	bf00      	nop
}
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40020800 	.word	0x40020800
 8000de0:	2000014c 	.word	0x2000014c

08000de4 <Motor_right>:
//---------------------------------------------------------------------
void Motor_right(struct Line_Follower* lf)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	if(!lf->speed_right)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d109      	bne.n	8000e08 <Motor_right+0x24>
	{
		HAL_GPIO_WritePin(GPIOB, DIR_B_Pin,GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2102      	movs	r1, #2
 8000df8:	481d      	ldr	r0, [pc, #116]	; (8000e70 <Motor_right+0x8c>)
 8000dfa:	f001 fc37 	bl	800266c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,0);
 8000dfe:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <Motor_right+0x90>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2200      	movs	r2, #0
 8000e04:	639a      	str	r2, [r3, #56]	; 0x38
			lf->speed_right = (lf->speed_right >= lf->MAX_SPEED) ? lf->MAX_SPEED : lf->speed_right;
			HAL_GPIO_WritePin(GPIOB, DIR_B_Pin,GPIO_PIN_RESET);
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,lf->speed_right);
      }
   }
   return;
 8000e06:	e030      	b.n	8000e6a <Motor_right+0x86>
		if (lf->speed_right >=1)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	dd13      	ble.n	8000e38 <Motor_right+0x54>
			lf->speed_right = (lf->speed_right >= lf->MAX_SPEED) ? lf->MAX_SPEED : lf->speed_right;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	bfa8      	it	ge
 8000e1c:	461a      	movge	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	649a      	str	r2, [r3, #72]	; 0x48
			HAL_GPIO_WritePin(GPIOB, DIR_B_Pin,GPIO_PIN_SET);
 8000e22:	2201      	movs	r2, #1
 8000e24:	2102      	movs	r1, #2
 8000e26:	4812      	ldr	r0, [pc, #72]	; (8000e70 <Motor_right+0x8c>)
 8000e28:	f001 fc20 	bl	800266c <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,lf->speed_right);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000e30:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <Motor_right+0x90>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	639a      	str	r2, [r3, #56]	; 0x38
   return;
 8000e36:	e018      	b.n	8000e6a <Motor_right+0x86>
			lf->speed_right *= (0-1);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e3c:	425a      	negs	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	649a      	str	r2, [r3, #72]	; 0x48
			lf->speed_right = (lf->speed_right >= lf->MAX_SPEED) ? lf->MAX_SPEED : lf->speed_right;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	bfa8      	it	ge
 8000e4e:	461a      	movge	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	649a      	str	r2, [r3, #72]	; 0x48
			HAL_GPIO_WritePin(GPIOB, DIR_B_Pin,GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2102      	movs	r1, #2
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <Motor_right+0x8c>)
 8000e5a:	f001 fc07 	bl	800266c <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,lf->speed_right);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000e62:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <Motor_right+0x90>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	639a      	str	r2, [r3, #56]	; 0x38
   return;
 8000e68:	bf00      	nop
}
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40020400 	.word	0x40020400
 8000e74:	2000014c 	.word	0x2000014c

08000e78 <Turbine>:
//---------------------------------------------------------------------
void Turbine(int speed)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	if(speed < 0)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	da02      	bge.n	8000e8c <Turbine+0x14>
		speed = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	e004      	b.n	8000e96 <Turbine+0x1e>
	else if(speed > 100)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b64      	cmp	r3, #100	; 0x64
 8000e90:	dd01      	ble.n	8000e96 <Turbine+0x1e>
		speed = 100;
 8000e92:	2364      	movs	r3, #100	; 0x64
 8000e94:	607b      	str	r3, [r7, #4]
	speed += 100;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3364      	adds	r3, #100	; 0x64
 8000e9a:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,speed);
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <Turbine+0x38>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 8000ea4:	bf00      	nop
}
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	2000010c 	.word	0x2000010c

08000eb4 <HAL_TIM_IC_CaptureCallback>:
//-------------------------------------------------------------------
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM2)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ec4:	d169      	bne.n	8000f9a <HAL_TIM_IC_CaptureCallback+0xe6>
	{
		if(NEC_IR.state == START)
 8000ec6:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000ec8:	7c5b      	ldrb	r3, [r3, #17]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d113      	bne.n	8000ef6 <HAL_TIM_IC_CaptureCallback+0x42>
		{
			//Restart counter
			__HAL_TIM_SetCounter(&htim2,0);
 8000ece:	4b37      	ldr	r3, [pc, #220]	; (8000fac <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	625a      	str	r2, [r3, #36]	; 0x24
			//Clear variables
			NEC_IR.input_capture = 0;
 8000ed6:	4b34      	ldr	r3, [pc, #208]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
			NEC_IR.input_last = 0;
 8000edc:	4b32      	ldr	r3, [pc, #200]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
			NEC_IR.input_diference = 0;
 8000ee2:	4b31      	ldr	r3, [pc, #196]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	605a      	str	r2, [r3, #4]
			NEC_IR.sample = 0;
 8000ee8:	4b2f      	ldr	r3, [pc, #188]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	741a      	strb	r2, [r3, #16]
			//start protocol
			NEC_IR.state = DATA;
 8000eee:	4b2e      	ldr	r3, [pc, #184]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	745a      	strb	r2, [r3, #17]
		  if(NEC_IR.sample==31)//if sample is 31 data is full
			  NEC_IR.state = DATA_FULL;
		  NEC_IR.input_last = NEC_IR.input_capture;
     }
   }
   return;
 8000ef4:	e051      	b.n	8000f9a <HAL_TIM_IC_CaptureCallback+0xe6>
	  else if(NEC_IR.state == DATA)
 8000ef6:	4b2c      	ldr	r3, [pc, #176]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000ef8:	7c5b      	ldrb	r3, [r3, #17]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d14d      	bne.n	8000f9a <HAL_TIM_IC_CaptureCallback+0xe6>
		  NEC_IR.input_capture = __HAL_TIM_GetCompare(&htim2, TIM_CHANNEL_1);    //read TIM2 channel 1 capture value
 8000efe:	4b2b      	ldr	r3, [pc, #172]	; (8000fac <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f04:	4a28      	ldr	r2, [pc, #160]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f06:	6013      	str	r3, [r2, #0]
		  NEC_IR.input_diference =  NEC_IR.input_capture - NEC_IR.input_last;
 8000f08:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b26      	ldr	r3, [pc, #152]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	4a25      	ldr	r2, [pc, #148]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f14:	6053      	str	r3, [r2, #4]
		  if(NEC_IR.input_diference > 215 && NEC_IR.input_diference < 235)//225
 8000f16:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	2bd7      	cmp	r3, #215	; 0xd7
 8000f1c:	d916      	bls.n	8000f4c <HAL_TIM_IC_CaptureCallback+0x98>
 8000f1e:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	2bea      	cmp	r3, #234	; 0xea
 8000f24:	d812      	bhi.n	8000f4c <HAL_TIM_IC_CaptureCallback+0x98>
			 NEC_IR.data |= (1UL << (31 - NEC_IR.sample));   // write 1
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f28:	68da      	ldr	r2, [r3, #12]
 8000f2a:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f2c:	7c1b      	ldrb	r3, [r3, #16]
 8000f2e:	f1c3 031f 	rsb	r3, r3, #31
 8000f32:	2101      	movs	r1, #1
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	4a1b      	ldr	r2, [pc, #108]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f3c:	60d3      	str	r3, [r2, #12]
			 NEC_IR.sample++;//increase sample
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f40:	7c1b      	ldrb	r3, [r3, #16]
 8000f42:	3301      	adds	r3, #1
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f48:	741a      	strb	r2, [r3, #16]
 8000f4a:	e01a      	b.n	8000f82 <HAL_TIM_IC_CaptureCallback+0xce>
		  else if(NEC_IR.input_diference > 102 && NEC_IR.input_diference < 122)//112
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b66      	cmp	r3, #102	; 0x66
 8000f52:	d916      	bls.n	8000f82 <HAL_TIM_IC_CaptureCallback+0xce>
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2b79      	cmp	r3, #121	; 0x79
 8000f5a:	d812      	bhi.n	8000f82 <HAL_TIM_IC_CaptureCallback+0xce>
			  NEC_IR.data &= ~(1UL << (31 - NEC_IR.sample));//write 0
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f62:	7c1b      	ldrb	r3, [r3, #16]
 8000f64:	f1c3 031f 	rsb	r3, r3, #31
 8000f68:	2101      	movs	r1, #1
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	4013      	ands	r3, r2
 8000f72:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f74:	60d3      	str	r3, [r2, #12]
			  NEC_IR.sample++;//increase sample
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f78:	7c1b      	ldrb	r3, [r3, #16]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f80:	741a      	strb	r2, [r3, #16]
		  if(NEC_IR.sample==31)//if sample is 31 data is full
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f84:	7c1b      	ldrb	r3, [r3, #16]
 8000f86:	2b1f      	cmp	r3, #31
 8000f88:	d102      	bne.n	8000f90 <HAL_TIM_IC_CaptureCallback+0xdc>
			  NEC_IR.state = DATA_FULL;
 8000f8a:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	745a      	strb	r2, [r3, #17]
		  NEC_IR.input_last = NEC_IR.input_capture;
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f96:	6093      	str	r3, [r2, #8]
   return;
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
}
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	200000f8 	.word	0x200000f8
 8000fac:	2000018c 	.word	0x2000018c

08000fb0 <Turn_on_off>:
//--------------------------------------------------------------------------------------
void Turn_on_off(struct Control_NEC* nec,struct Line_Follower* lf)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
	if(nec->state == DATA_FULL)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	7c5b      	ldrb	r3, [r3, #17]
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d153      	bne.n	800106a <Turn_on_off+0xba>
	{
		switch (nec->data)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	4a2b      	ldr	r2, [pc, #172]	; (8001074 <Turn_on_off+0xc4>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d017      	beq.n	8000ffc <Turn_on_off+0x4c>
 8000fcc:	4a29      	ldr	r2, [pc, #164]	; (8001074 <Turn_on_off+0xc4>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d803      	bhi.n	8000fda <Turn_on_off+0x2a>
 8000fd2:	4a29      	ldr	r2, [pc, #164]	; (8001078 <Turn_on_off+0xc8>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d00c      	beq.n	8000ff2 <Turn_on_off+0x42>
 8000fd8:	e03e      	b.n	8001058 <Turn_on_off+0xa8>
 8000fda:	4a28      	ldr	r2, [pc, #160]	; (800107c <Turn_on_off+0xcc>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d003      	beq.n	8000fe8 <Turn_on_off+0x38>
 8000fe0:	4a27      	ldr	r2, [pc, #156]	; (8001080 <Turn_on_off+0xd0>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d021      	beq.n	800102a <Turn_on_off+0x7a>
 8000fe6:	e037      	b.n	8001058 <Turn_on_off+0xa8>
		{
			case ON:
				lf->state = STARTING;
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	2201      	movs	r2, #1
 8000fec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		      	break;
 8000ff0:	e032      	b.n	8001058 <Turn_on_off+0xa8>
		    case OFF:
				lf->state = HOME;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		        break;
 8000ffa:	e02d      	b.n	8001058 <Turn_on_off+0xa8>
		    case ONE:
		        lf->PID.KP = 51.4257;//98.5219//142.8568;//51.4257;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	4a21      	ldr	r2, [pc, #132]	; (8001084 <Turn_on_off+0xd4>)
 8001000:	65da      	str	r2, [r3, #92]	; 0x5c
		        lf->PID.KI = 1.0;//1.52//2.318;//1.0
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001008:	665a      	str	r2, [r3, #100]	; 0x64
		        lf->PID.KD = 141.4208;//270.9322//406.3984//;141.4208
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	4a1e      	ldr	r2, [pc, #120]	; (8001088 <Turn_on_off+0xd8>)
 800100e:	661a      	str	r2, [r3, #96]	; 0x60
		        lf->MAX_SPEED = 399;//499//419
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	f240 128f 	movw	r2, #399	; 0x18f
 8001016:	64da      	str	r2, [r3, #76]	; 0x4c
		        lf->MED_SPEED  = 300;//499//289
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800101e:	651a      	str	r2, [r3, #80]	; 0x50
		        lf->state = STARTING;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	2201      	movs	r2, #1
 8001024:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		        break;
 8001028:	e016      	b.n	8001058 <Turn_on_off+0xa8>
		    case TWO:
		    	lf->PID.KP = 61.2444;//98.5219//142.8568;//51.4257;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	4a17      	ldr	r2, [pc, #92]	; (800108c <Turn_on_off+0xdc>)
 800102e:	65da      	str	r2, [r3, #92]	; 0x5c
		    	lf->PID.KD = 168.4224;//270.9322//406.3984//;141.4208
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	4a17      	ldr	r2, [pc, #92]	; (8001090 <Turn_on_off+0xe0>)
 8001034:	661a      	str	r2, [r3, #96]	; 0x60
		    	lf->PID.KI = 1.0;//1.52//2.318;//1.0
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800103c:	665a      	str	r2, [r3, #100]	; 0x64
		    	lf->MAX_SPEED = 499;//499//419
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001044:	64da      	str	r2, [r3, #76]	; 0x4c
		    	lf->MED_SPEED  = 345;//499//289
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	f240 1259 	movw	r2, #345	; 0x159
 800104c:	651a      	str	r2, [r3, #80]	; 0x50
		    	lf->state = STARTING;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	2201      	movs	r2, #1
 8001052:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		    	break;
 8001056:	bf00      	nop
		}
		HAL_Delay(150);
 8001058:	2096      	movs	r0, #150	; 0x96
 800105a:	f000 fc4d 	bl	80018f8 <HAL_Delay>
		nec->data = 0;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	60da      	str	r2, [r3, #12]
		nec->state = START;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	745a      	strb	r2, [r3, #17]
	}
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	01fe50ae 	.word	0x01fe50ae
 8001078:	01fe48b6 	.word	0x01fe48b6
 800107c:	01fe807e 	.word	0x01fe807e
 8001080:	01fed826 	.word	0x01fed826
 8001084:	424db3eb 	.word	0x424db3eb
 8001088:	430d6bba 	.word	0x430d6bba
 800108c:	4274fa44 	.word	0x4274fa44
 8001090:	43286c22 	.word	0x43286c22

08001094 <Line_follower_state_machine>:
//-----------------------------------------------------------------------------------------
void Line_follower_state_machine(struct Line_Follower* lf)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	switch (lf->state)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d00e      	beq.n	80010c4 <Line_follower_state_machine+0x30>
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d018      	beq.n	80010dc <Line_follower_state_machine+0x48>
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f040 80b9 	bne.w	8001222 <Line_follower_state_machine+0x18e>
	{
		case HOME:
			Turbine(12);
 80010b0:	200c      	movs	r0, #12
 80010b2:	f7ff fee1 	bl	8000e78 <Turbine>
			lf->speed_left = 0;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	645a      	str	r2, [r3, #68]	; 0x44
			lf->speed_right = 0;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	649a      	str	r2, [r3, #72]	; 0x48
			break;
 80010c2:	e0ae      	b.n	8001222 <Line_follower_state_machine+0x18e>
		case STARTING:
			Turbine(38);
 80010c4:	2026      	movs	r0, #38	; 0x26
 80010c6:	f7ff fed7 	bl	8000e78 <Turbine>
			lf->state = RUN;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2202      	movs	r2, #2
 80010ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			HAL_Delay(1000);
 80010d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010d6:	f000 fc0f 	bl	80018f8 <HAL_Delay>
			break;
 80010da:	e0a2      	b.n	8001222 <Line_follower_state_machine+0x18e>
		case RUN:
			//Read real error -10 to 10
			Get_error(lf);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff fcad 	bl	8000a3c <Get_error>
			//Out line
			if(lf->PID.error_now == OUT_LINE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80010e8:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001238 <Line_follower_state_machine+0x1a4>
 80010ec:	eef4 7a47 	vcmp.f32	s15, s14
 80010f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f4:	d127      	bne.n	8001146 <Line_follower_state_machine+0xb2>
			{
				//Out line state machine//
				switch (lf->out_state)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d00d      	beq.n	800111c <Line_follower_state_machine+0x88>
 8001100:	2b02      	cmp	r3, #2
 8001102:	d015      	beq.n	8001130 <Line_follower_state_machine+0x9c>
 8001104:	2b00      	cmp	r3, #0
 8001106:	d000      	beq.n	800110a <Line_follower_state_machine+0x76>
				lf->PID.error_last[3] = lf->PID.error_last[2];
				lf->PID.error_last[2] = lf->PID.error_last[1];
				lf->PID.error_last[1] = lf->PID.error_last[0];
				lf->PID.error_last[0] = lf->PID.error_now;
			}
			break;
 8001108:	e08a      	b.n	8001220 <Line_follower_state_machine+0x18c>
		            	lf->speed_left = lf->MED_SPEED;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	645a      	str	r2, [r3, #68]	; 0x44
		            	lf->speed_right = lf->MED_SPEED;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	649a      	str	r2, [r3, #72]	; 0x48
		                break;
 800111a:	e081      	b.n	8001220 <Line_follower_state_machine+0x18c>
		            	lf->speed_left = lf->MAX_SPEED;//left
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	645a      	str	r2, [r3, #68]	; 0x44
		            	lf->speed_right = (0-lf->MAX_SPEED);//Right
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001128:	425a      	negs	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	649a      	str	r2, [r3, #72]	; 0x48
		            	break;
 800112e:	e077      	b.n	8001220 <Line_follower_state_machine+0x18c>
		            	lf->speed_left = (0-lf->MAX_SPEED);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001134:	425a      	negs	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	645a      	str	r2, [r3, #68]	; 0x44
		            	lf->speed_right = lf->MAX_SPEED;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	649a      	str	r2, [r3, #72]	; 0x48
		                break;
 8001142:	bf00      	nop
 8001144:	e06c      	b.n	8001220 <Line_follower_state_machine+0x18c>
				lf->PID.sum_errors = 0;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				for(int i =0;i<6;i++)
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	e012      	b.n	800117c <Line_follower_state_machine+0xe8>
					lf->PID.sum_errors += lf->PID.error_last[i];
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	331a      	adds	r3, #26
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	3304      	adds	r3, #4
 8001168:	edd3 7a00 	vldr	s15, [r3]
 800116c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
				for(int i =0;i<6;i++)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	3301      	adds	r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2b05      	cmp	r3, #5
 8001180:	dde9      	ble.n	8001156 <Line_follower_state_machine+0xc2>
				lf->PID.U = (int)(lf->PID.KP * lf->PID.error_now + lf->PID.KD * (lf->PID.error_now - lf->PID.error_last[0])+lf->PID.KI*lf->PID.sum_errors);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800118e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	ed93 6a1a 	vldr	s12, [r3, #104]	; 0x68
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80011a4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80011a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80011bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c8:	ee17 2a90 	vmov	r2, s15
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	659a      	str	r2, [r3, #88]	; 0x58
				lf->speed_left = lf->MED_SPEED + lf->PID.U;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d8:	441a      	add	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	645a      	str	r2, [r3, #68]	; 0x44
				lf->speed_right = lf->MED_SPEED - lf->PID.U;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e6:	1ad2      	subs	r2, r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	649a      	str	r2, [r3, #72]	; 0x48
				lf->PID.error_last[5] = lf->PID.error_last[4];
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
				lf->PID.error_last[4] = lf->PID.error_last[3];
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	67da      	str	r2, [r3, #124]	; 0x7c
				lf->PID.error_last[3] = lf->PID.error_last[2];
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	679a      	str	r2, [r3, #120]	; 0x78
				lf->PID.error_last[2] = lf->PID.error_last[1];
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	675a      	str	r2, [r3, #116]	; 0x74
				lf->PID.error_last[1] = lf->PID.error_last[0];
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	671a      	str	r2, [r3, #112]	; 0x70
				lf->PID.error_last[0] = lf->PID.error_now;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	66da      	str	r2, [r3, #108]	; 0x6c
			break;
 800121e:	e7ff      	b.n	8001220 <Line_follower_state_machine+0x18c>
 8001220:	bf00      	nop
		}
		Motor_left(lf);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff fd94 	bl	8000d50 <Motor_left>
		Motor_right(lf);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff fddb 	bl	8000de4 <Motor_right>
}
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	42c80000 	.word	0x42c80000

0800123c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <HAL_MspInit+0x4c>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	4a0f      	ldr	r2, [pc, #60]	; (8001298 <HAL_MspInit+0x4c>)
 800125c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001260:	6453      	str	r3, [r2, #68]	; 0x44
 8001262:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <HAL_MspInit+0x4c>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	603b      	str	r3, [r7, #0]
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <HAL_MspInit+0x4c>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	4a08      	ldr	r2, [pc, #32]	; (8001298 <HAL_MspInit+0x4c>)
 8001278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127c:	6413      	str	r3, [r2, #64]	; 0x40
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_MspInit+0x4c>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800

0800129c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ae:	e7fe      	b.n	80012ae <HardFault_Handler+0x4>

080012b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <MemManage_Handler+0x4>

080012b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <BusFault_Handler+0x4>

080012bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <UsageFault_Handler+0x4>

080012c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f0:	f000 fae2 	bl	80018b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <TIM2_IRQHandler+0x10>)
 80012fe:	f001 ff13 	bl	8003128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2000018c 	.word	0x2000018c

0800130c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <SystemInit+0x28>)
 8001312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001316:	4a07      	ldr	r2, [pc, #28]	; (8001334 <SystemInit+0x28>)
 8001318:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800131c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <SystemInit+0x28>)
 8001322:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001326:	609a      	str	r2, [r3, #8]
#endif
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	; 0x28
 800133c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133e:	f107 0318 	add.w	r3, r7, #24
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001356:	463b      	mov	r3, r7
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8001362:	4b2c      	ldr	r3, [pc, #176]	; (8001414 <MX_TIM2_Init+0xdc>)
 8001364:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001368:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 800136a:	4b2a      	ldr	r3, [pc, #168]	; (8001414 <MX_TIM2_Init+0xdc>)
 800136c:	229f      	movs	r2, #159	; 0x9f
 800136e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001370:	4b28      	ldr	r3, [pc, #160]	; (8001414 <MX_TIM2_Init+0xdc>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001376:	4b27      	ldr	r3, [pc, #156]	; (8001414 <MX_TIM2_Init+0xdc>)
 8001378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800137c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137e:	4b25      	ldr	r3, [pc, #148]	; (8001414 <MX_TIM2_Init+0xdc>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001384:	4b23      	ldr	r3, [pc, #140]	; (8001414 <MX_TIM2_Init+0xdc>)
 8001386:	2200      	movs	r2, #0
 8001388:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800138a:	4822      	ldr	r0, [pc, #136]	; (8001414 <MX_TIM2_Init+0xdc>)
 800138c:	f001 fd90 	bl	8002eb0 <HAL_TIM_Base_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001396:	f7ff ff51 	bl	800123c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800139a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013a0:	f107 0318 	add.w	r3, r7, #24
 80013a4:	4619      	mov	r1, r3
 80013a6:	481b      	ldr	r0, [pc, #108]	; (8001414 <MX_TIM2_Init+0xdc>)
 80013a8:	f002 f928 	bl	80035fc <HAL_TIM_ConfigClockSource>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80013b2:	f7ff ff43 	bl	800123c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80013b6:	4817      	ldr	r0, [pc, #92]	; (8001414 <MX_TIM2_Init+0xdc>)
 80013b8:	f001 fe18 	bl	8002fec <HAL_TIM_IC_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80013c2:	f7ff ff3b 	bl	800123c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	4619      	mov	r1, r3
 80013d4:	480f      	ldr	r0, [pc, #60]	; (8001414 <MX_TIM2_Init+0xdc>)
 80013d6:	f002 fe2b 	bl	8004030 <HAL_TIMEx_MasterConfigSynchronization>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80013e0:	f7ff ff2c 	bl	800123c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80013e4:	2302      	movs	r3, #2
 80013e6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013e8:	2301      	movs	r3, #1
 80013ea:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80013f0:	230f      	movs	r3, #15
 80013f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013f4:	463b      	mov	r3, r7
 80013f6:	2200      	movs	r2, #0
 80013f8:	4619      	mov	r1, r3
 80013fa:	4806      	ldr	r0, [pc, #24]	; (8001414 <MX_TIM2_Init+0xdc>)
 80013fc:	f001 ff9c 	bl	8003338 <HAL_TIM_IC_ConfigChannel>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001406:	f7ff ff19 	bl	800123c <Error_Handler>
  }

}
 800140a:	bf00      	nop
 800140c:	3728      	adds	r7, #40	; 0x28
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2000018c 	.word	0x2000018c

08001418 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08e      	sub	sp, #56	; 0x38
 800141c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142c:	f107 0320 	add.w	r3, r7, #32
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
 8001444:	615a      	str	r2, [r3, #20]
 8001446:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001448:	4b32      	ldr	r3, [pc, #200]	; (8001514 <MX_TIM3_Init+0xfc>)
 800144a:	4a33      	ldr	r2, [pc, #204]	; (8001518 <MX_TIM3_Init+0x100>)
 800144c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 800144e:	4b31      	ldr	r3, [pc, #196]	; (8001514 <MX_TIM3_Init+0xfc>)
 8001450:	2201      	movs	r2, #1
 8001452:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001454:	4b2f      	ldr	r3, [pc, #188]	; (8001514 <MX_TIM3_Init+0xfc>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 800145a:	4b2e      	ldr	r3, [pc, #184]	; (8001514 <MX_TIM3_Init+0xfc>)
 800145c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001460:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001462:	4b2c      	ldr	r3, [pc, #176]	; (8001514 <MX_TIM3_Init+0xfc>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001468:	4b2a      	ldr	r3, [pc, #168]	; (8001514 <MX_TIM3_Init+0xfc>)
 800146a:	2200      	movs	r2, #0
 800146c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800146e:	4829      	ldr	r0, [pc, #164]	; (8001514 <MX_TIM3_Init+0xfc>)
 8001470:	f001 fd1e 	bl	8002eb0 <HAL_TIM_Base_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800147a:	f7ff fedf 	bl	800123c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001484:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001488:	4619      	mov	r1, r3
 800148a:	4822      	ldr	r0, [pc, #136]	; (8001514 <MX_TIM3_Init+0xfc>)
 800148c:	f002 f8b6 	bl	80035fc <HAL_TIM_ConfigClockSource>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001496:	f7ff fed1 	bl	800123c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800149a:	481e      	ldr	r0, [pc, #120]	; (8001514 <MX_TIM3_Init+0xfc>)
 800149c:	f001 fd33 	bl	8002f06 <HAL_TIM_PWM_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80014a6:	f7ff fec9 	bl	800123c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014b2:	f107 0320 	add.w	r3, r7, #32
 80014b6:	4619      	mov	r1, r3
 80014b8:	4816      	ldr	r0, [pc, #88]	; (8001514 <MX_TIM3_Init+0xfc>)
 80014ba:	f002 fdb9 	bl	8004030 <HAL_TIMEx_MasterConfigSynchronization>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80014c4:	f7ff feba 	bl	800123c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014c8:	2360      	movs	r3, #96	; 0x60
 80014ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	2200      	movs	r2, #0
 80014dc:	4619      	mov	r1, r3
 80014de:	480d      	ldr	r0, [pc, #52]	; (8001514 <MX_TIM3_Init+0xfc>)
 80014e0:	f001 ffc6 	bl	8003470 <HAL_TIM_PWM_ConfigChannel>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80014ea:	f7ff fea7 	bl	800123c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	2204      	movs	r2, #4
 80014f2:	4619      	mov	r1, r3
 80014f4:	4807      	ldr	r0, [pc, #28]	; (8001514 <MX_TIM3_Init+0xfc>)
 80014f6:	f001 ffbb 	bl	8003470 <HAL_TIM_PWM_ConfigChannel>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001500:	f7ff fe9c 	bl	800123c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001504:	4803      	ldr	r0, [pc, #12]	; (8001514 <MX_TIM3_Init+0xfc>)
 8001506:	f000 f8f9 	bl	80016fc <HAL_TIM_MspPostInit>

}
 800150a:	bf00      	nop
 800150c:	3738      	adds	r7, #56	; 0x38
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	2000014c 	.word	0x2000014c
 8001518:	40000400 	.word	0x40000400

0800151c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08e      	sub	sp, #56	; 0x38
 8001520:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001522:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001530:	f107 0320 	add.w	r3, r7, #32
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
 8001548:	615a      	str	r2, [r3, #20]
 800154a:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800154c:	4b2c      	ldr	r3, [pc, #176]	; (8001600 <MX_TIM4_Init+0xe4>)
 800154e:	4a2d      	ldr	r2, [pc, #180]	; (8001604 <MX_TIM4_Init+0xe8>)
 8001550:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 159;
 8001552:	4b2b      	ldr	r3, [pc, #172]	; (8001600 <MX_TIM4_Init+0xe4>)
 8001554:	229f      	movs	r2, #159	; 0x9f
 8001556:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001558:	4b29      	ldr	r3, [pc, #164]	; (8001600 <MX_TIM4_Init+0xe4>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 800155e:	4b28      	ldr	r3, [pc, #160]	; (8001600 <MX_TIM4_Init+0xe4>)
 8001560:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001564:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <MX_TIM4_Init+0xe4>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156c:	4b24      	ldr	r3, [pc, #144]	; (8001600 <MX_TIM4_Init+0xe4>)
 800156e:	2200      	movs	r2, #0
 8001570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001572:	4823      	ldr	r0, [pc, #140]	; (8001600 <MX_TIM4_Init+0xe4>)
 8001574:	f001 fc9c 	bl	8002eb0 <HAL_TIM_Base_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800157e:	f7ff fe5d 	bl	800123c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001588:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800158c:	4619      	mov	r1, r3
 800158e:	481c      	ldr	r0, [pc, #112]	; (8001600 <MX_TIM4_Init+0xe4>)
 8001590:	f002 f834 	bl	80035fc <HAL_TIM_ConfigClockSource>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800159a:	f7ff fe4f 	bl	800123c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800159e:	4818      	ldr	r0, [pc, #96]	; (8001600 <MX_TIM4_Init+0xe4>)
 80015a0:	f001 fcb1 	bl	8002f06 <HAL_TIM_PWM_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80015aa:	f7ff fe47 	bl	800123c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ae:	2300      	movs	r3, #0
 80015b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015b6:	f107 0320 	add.w	r3, r7, #32
 80015ba:	4619      	mov	r1, r3
 80015bc:	4810      	ldr	r0, [pc, #64]	; (8001600 <MX_TIM4_Init+0xe4>)
 80015be:	f002 fd37 	bl	8004030 <HAL_TIMEx_MasterConfigSynchronization>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80015c8:	f7ff fe38 	bl	800123c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015cc:	2360      	movs	r3, #96	; 0x60
 80015ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 112;
 80015d0:	2370      	movs	r3, #112	; 0x70
 80015d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	2200      	movs	r2, #0
 80015e0:	4619      	mov	r1, r3
 80015e2:	4807      	ldr	r0, [pc, #28]	; (8001600 <MX_TIM4_Init+0xe4>)
 80015e4:	f001 ff44 	bl	8003470 <HAL_TIM_PWM_ConfigChannel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80015ee:	f7ff fe25 	bl	800123c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80015f2:	4803      	ldr	r0, [pc, #12]	; (8001600 <MX_TIM4_Init+0xe4>)
 80015f4:	f000 f882 	bl	80016fc <HAL_TIM_MspPostInit>

}
 80015f8:	bf00      	nop
 80015fa:	3738      	adds	r7, #56	; 0x38
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	2000010c 	.word	0x2000010c
 8001604:	40000800 	.word	0x40000800

08001608 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08c      	sub	sp, #48	; 0x30
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001628:	d134      	bne.n	8001694 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
 800162e:	4b2f      	ldr	r3, [pc, #188]	; (80016ec <HAL_TIM_Base_MspInit+0xe4>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	4a2e      	ldr	r2, [pc, #184]	; (80016ec <HAL_TIM_Base_MspInit+0xe4>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6413      	str	r3, [r2, #64]	; 0x40
 800163a:	4b2c      	ldr	r3, [pc, #176]	; (80016ec <HAL_TIM_Base_MspInit+0xe4>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	61bb      	str	r3, [r7, #24]
 8001644:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	4b28      	ldr	r3, [pc, #160]	; (80016ec <HAL_TIM_Base_MspInit+0xe4>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a27      	ldr	r2, [pc, #156]	; (80016ec <HAL_TIM_Base_MspInit+0xe4>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b25      	ldr	r3, [pc, #148]	; (80016ec <HAL_TIM_Base_MspInit+0xe4>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001662:	2301      	movs	r3, #1
 8001664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001672:	2301      	movs	r3, #1
 8001674:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001676:	f107 031c 	add.w	r3, r7, #28
 800167a:	4619      	mov	r1, r3
 800167c:	481c      	ldr	r0, [pc, #112]	; (80016f0 <HAL_TIM_Base_MspInit+0xe8>)
 800167e:	f000 fe5b 	bl	8002338 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	2100      	movs	r1, #0
 8001686:	201c      	movs	r0, #28
 8001688:	f000 fe1f 	bl	80022ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800168c:	201c      	movs	r0, #28
 800168e:	f000 fe38 	bl	8002302 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001692:	e026      	b.n	80016e2 <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM3)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a16      	ldr	r2, [pc, #88]	; (80016f4 <HAL_TIM_Base_MspInit+0xec>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d10e      	bne.n	80016bc <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_TIM_Base_MspInit+0xe4>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	4a11      	ldr	r2, [pc, #68]	; (80016ec <HAL_TIM_Base_MspInit+0xe4>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	6413      	str	r3, [r2, #64]	; 0x40
 80016ae:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <HAL_TIM_Base_MspInit+0xe4>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]
}
 80016ba:	e012      	b.n	80016e2 <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM4)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0d      	ldr	r2, [pc, #52]	; (80016f8 <HAL_TIM_Base_MspInit+0xf0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d10d      	bne.n	80016e2 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <HAL_TIM_Base_MspInit+0xe4>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	4a07      	ldr	r2, [pc, #28]	; (80016ec <HAL_TIM_Base_MspInit+0xe4>)
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	6413      	str	r3, [r2, #64]	; 0x40
 80016d6:	4b05      	ldr	r3, [pc, #20]	; (80016ec <HAL_TIM_Base_MspInit+0xe4>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
}
 80016e2:	bf00      	nop
 80016e4:	3730      	adds	r7, #48	; 0x30
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020000 	.word	0x40020000
 80016f4:	40000400 	.word	0x40000400
 80016f8:	40000800 	.word	0x40000800

080016fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	; 0x28
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a24      	ldr	r2, [pc, #144]	; (80017ac <HAL_TIM_MspPostInit+0xb0>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d11e      	bne.n	800175c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <HAL_TIM_MspPostInit+0xb4>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a22      	ldr	r2, [pc, #136]	; (80017b0 <HAL_TIM_MspPostInit+0xb4>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <HAL_TIM_MspPostInit+0xb4>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_A_Pin|PWM_B_Pin;
 800173a:	23c0      	movs	r3, #192	; 0xc0
 800173c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800174a:	2302      	movs	r3, #2
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4619      	mov	r1, r3
 8001754:	4817      	ldr	r0, [pc, #92]	; (80017b4 <HAL_TIM_MspPostInit+0xb8>)
 8001756:	f000 fdef 	bl	8002338 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800175a:	e023      	b.n	80017a4 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM4)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a15      	ldr	r2, [pc, #84]	; (80017b8 <HAL_TIM_MspPostInit+0xbc>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d11e      	bne.n	80017a4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <HAL_TIM_MspPostInit+0xb4>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a10      	ldr	r2, [pc, #64]	; (80017b0 <HAL_TIM_MspPostInit+0xb4>)
 8001770:	f043 0308 	orr.w	r3, r3, #8
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <HAL_TIM_MspPostInit+0xb4>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_ESC_Pin;
 8001782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	2302      	movs	r3, #2
 800178a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001794:	2302      	movs	r3, #2
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ESC_GPIO_Port, &GPIO_InitStruct);
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	4807      	ldr	r0, [pc, #28]	; (80017bc <HAL_TIM_MspPostInit+0xc0>)
 80017a0:	f000 fdca 	bl	8002338 <HAL_GPIO_Init>
}
 80017a4:	bf00      	nop
 80017a6:	3728      	adds	r7, #40	; 0x28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40000400 	.word	0x40000400
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40020000 	.word	0x40020000
 80017b8:	40000800 	.word	0x40000800
 80017bc:	40020c00 	.word	0x40020c00

080017c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017c6:	e003      	b.n	80017d0 <LoopCopyDataInit>

080017c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017ce:	3104      	adds	r1, #4

080017d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017d0:	480b      	ldr	r0, [pc, #44]	; (8001800 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017d8:	d3f6      	bcc.n	80017c8 <CopyDataInit>
  ldr  r2, =_sbss
 80017da:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017dc:	e002      	b.n	80017e4 <LoopFillZerobss>

080017de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017e0:	f842 3b04 	str.w	r3, [r2], #4

080017e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017e8:	d3f9      	bcc.n	80017de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017ea:	f7ff fd8f 	bl	800130c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ee:	f002 fcaf 	bl	8004150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017f2:	f7fe ff97 	bl	8000724 <main>
  bx  lr    
 80017f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80017fc:	08004200 	.word	0x08004200
  ldr  r0, =_sdata
 8001800:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001804:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001808:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800180c:	200001d0 	.word	0x200001d0

08001810 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001810:	e7fe      	b.n	8001810 <ADC_IRQHandler>
	...

08001814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001818:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <HAL_Init+0x40>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0d      	ldr	r2, [pc, #52]	; (8001854 <HAL_Init+0x40>)
 800181e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001822:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_Init+0x40>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <HAL_Init+0x40>)
 800182a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800182e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <HAL_Init+0x40>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a07      	ldr	r2, [pc, #28]	; (8001854 <HAL_Init+0x40>)
 8001836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800183c:	2003      	movs	r0, #3
 800183e:	f000 fd39 	bl	80022b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001842:	2000      	movs	r0, #0
 8001844:	f000 f808 	bl	8001858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001848:	f7ff fd00 	bl	800124c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023c00 	.word	0x40023c00

08001858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_InitTick+0x54>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_InitTick+0x58>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4619      	mov	r1, r3
 800186a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001872:	fbb2 f3f3 	udiv	r3, r2, r3
 8001876:	4618      	mov	r0, r3
 8001878:	f000 fd51 	bl	800231e <HAL_SYSTICK_Config>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e00e      	b.n	80018a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b0f      	cmp	r3, #15
 800188a:	d80a      	bhi.n	80018a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800188c:	2200      	movs	r2, #0
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001894:	f000 fd19 	bl	80022ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001898:	4a06      	ldr	r2, [pc, #24]	; (80018b4 <HAL_InitTick+0x5c>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	e000      	b.n	80018a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000000 	.word	0x20000000
 80018b0:	20000008 	.word	0x20000008
 80018b4:	20000004 	.word	0x20000004

080018b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_IncTick+0x20>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_IncTick+0x24>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	4a04      	ldr	r2, [pc, #16]	; (80018dc <HAL_IncTick+0x24>)
 80018ca:	6013      	str	r3, [r2, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000008 	.word	0x20000008
 80018dc:	200001cc 	.word	0x200001cc

080018e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <HAL_GetTick+0x14>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	200001cc 	.word	0x200001cc

080018f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001900:	f7ff ffee 	bl	80018e0 <HAL_GetTick>
 8001904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001910:	d005      	beq.n	800191e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_Delay+0x40>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800191e:	bf00      	nop
 8001920:	f7ff ffde 	bl	80018e0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	429a      	cmp	r2, r3
 800192e:	d8f7      	bhi.n	8001920 <HAL_Delay+0x28>
  {
  }
}
 8001930:	bf00      	nop
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000008 	.word	0x20000008

0800193c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e033      	b.n	80019ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	2b00      	cmp	r3, #0
 8001958:	d109      	bne.n	800196e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7fe fe06 	bl	800056c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f003 0310 	and.w	r3, r3, #16
 8001976:	2b00      	cmp	r3, #0
 8001978:	d118      	bne.n	80019ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001982:	f023 0302 	bic.w	r3, r3, #2
 8001986:	f043 0202 	orr.w	r2, r3, #2
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 fac4 	bl	8001f1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f023 0303 	bic.w	r3, r3, #3
 80019a2:	f043 0201 	orr.w	r2, r3, #1
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	641a      	str	r2, [r3, #64]	; 0x40
 80019aa:	e001      	b.n	80019b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d101      	bne.n	80019de <HAL_ADC_Start+0x1a>
 80019da:	2302      	movs	r3, #2
 80019dc:	e0a5      	b.n	8001b2a <HAL_ADC_Start+0x166>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d018      	beq.n	8001a26 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 0201 	orr.w	r2, r2, #1
 8001a02:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a04:	4b4c      	ldr	r3, [pc, #304]	; (8001b38 <HAL_ADC_Start+0x174>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a4c      	ldr	r2, [pc, #304]	; (8001b3c <HAL_ADC_Start+0x178>)
 8001a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0e:	0c9a      	lsrs	r2, r3, #18
 8001a10:	4613      	mov	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	4413      	add	r3, r2
 8001a16:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a18:	e002      	b.n	8001a20 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f9      	bne.n	8001a1a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d179      	bne.n	8001b28 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a3c:	f023 0301 	bic.w	r3, r3, #1
 8001a40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d007      	beq.n	8001a66 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a5e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a72:	d106      	bne.n	8001a82 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a78:	f023 0206 	bic.w	r2, r3, #6
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	645a      	str	r2, [r3, #68]	; 0x44
 8001a80:	e002      	b.n	8001a88 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a90:	4b2b      	ldr	r3, [pc, #172]	; (8001b40 <HAL_ADC_Start+0x17c>)
 8001a92:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a9c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 031f 	and.w	r3, r3, #31
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d12a      	bne.n	8001b00 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a25      	ldr	r2, [pc, #148]	; (8001b44 <HAL_ADC_Start+0x180>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d015      	beq.n	8001ae0 <HAL_ADC_Start+0x11c>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a23      	ldr	r2, [pc, #140]	; (8001b48 <HAL_ADC_Start+0x184>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d105      	bne.n	8001aca <HAL_ADC_Start+0x106>
 8001abe:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <HAL_ADC_Start+0x17c>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 031f 	and.w	r3, r3, #31
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00a      	beq.n	8001ae0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a1f      	ldr	r2, [pc, #124]	; (8001b4c <HAL_ADC_Start+0x188>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d129      	bne.n	8001b28 <HAL_ADC_Start+0x164>
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <HAL_ADC_Start+0x17c>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 031f 	and.w	r3, r3, #31
 8001adc:	2b0f      	cmp	r3, #15
 8001ade:	d823      	bhi.n	8001b28 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d11c      	bne.n	8001b28 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	e013      	b.n	8001b28 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0f      	ldr	r2, [pc, #60]	; (8001b44 <HAL_ADC_Start+0x180>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d10e      	bne.n	8001b28 <HAL_ADC_Start+0x164>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d107      	bne.n	8001b28 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b26:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	431bde83 	.word	0x431bde83
 8001b40:	40012300 	.word	0x40012300
 8001b44:	40012000 	.word	0x40012000
 8001b48:	40012100 	.word	0x40012100
 8001b4c:	40012200 	.word	0x40012200

08001b50 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d101      	bne.n	8001b66 <HAL_ADC_Stop+0x16>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e021      	b.n	8001baa <HAL_ADC_Stop+0x5a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 0201 	bic.w	r2, r2, #1
 8001b7c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d109      	bne.n	8001ba0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b94:	f023 0301 	bic.w	r3, r3, #1
 8001b98:	f043 0201 	orr.w	r2, r3, #1
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bd2:	d113      	bne.n	8001bfc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001be2:	d10b      	bne.n	8001bfc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	f043 0220 	orr.w	r2, r3, #32
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e05c      	b.n	8001cb6 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001bfc:	f7ff fe70 	bl	80018e0 <HAL_GetTick>
 8001c00:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c02:	e01a      	b.n	8001c3a <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c0a:	d016      	beq.n	8001c3a <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d007      	beq.n	8001c22 <HAL_ADC_PollForConversion+0x6c>
 8001c12:	f7ff fe65 	bl	80018e0 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d20b      	bcs.n	8001c3a <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f043 0204 	orr.w	r2, r3, #4
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e03d      	b.n	8001cb6 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d1dd      	bne.n	8001c04 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f06f 0212 	mvn.w	r2, #18
 8001c50:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d123      	bne.n	8001cb4 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d11f      	bne.n	8001cb4 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d006      	beq.n	8001c90 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d111      	bne.n	8001cb4 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d105      	bne.n	8001cb4 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	f043 0201 	orr.w	r2, r3, #1
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d101      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x1c>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e105      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x228>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b09      	cmp	r3, #9
 8001d02:	d925      	bls.n	8001d50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68d9      	ldr	r1, [r3, #12]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	461a      	mov	r2, r3
 8001d12:	4613      	mov	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	4413      	add	r3, r2
 8001d18:	3b1e      	subs	r3, #30
 8001d1a:	2207      	movs	r2, #7
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43da      	mvns	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	400a      	ands	r2, r1
 8001d28:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68d9      	ldr	r1, [r3, #12]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4403      	add	r3, r0
 8001d42:	3b1e      	subs	r3, #30
 8001d44:	409a      	lsls	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	e022      	b.n	8001d96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6919      	ldr	r1, [r3, #16]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	2207      	movs	r2, #7
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43da      	mvns	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	400a      	ands	r2, r1
 8001d72:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6919      	ldr	r1, [r3, #16]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	4618      	mov	r0, r3
 8001d86:	4603      	mov	r3, r0
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4403      	add	r3, r0
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b06      	cmp	r3, #6
 8001d9c:	d824      	bhi.n	8001de8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	3b05      	subs	r3, #5
 8001db0:	221f      	movs	r2, #31
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43da      	mvns	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	400a      	ands	r2, r1
 8001dbe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	4618      	mov	r0, r3
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3b05      	subs	r3, #5
 8001dda:	fa00 f203 	lsl.w	r2, r0, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	635a      	str	r2, [r3, #52]	; 0x34
 8001de6:	e04c      	b.n	8001e82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b0c      	cmp	r3, #12
 8001dee:	d824      	bhi.n	8001e3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	3b23      	subs	r3, #35	; 0x23
 8001e02:	221f      	movs	r2, #31
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43da      	mvns	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	400a      	ands	r2, r1
 8001e10:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	4618      	mov	r0, r3
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	3b23      	subs	r3, #35	; 0x23
 8001e2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	631a      	str	r2, [r3, #48]	; 0x30
 8001e38:	e023      	b.n	8001e82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	3b41      	subs	r3, #65	; 0x41
 8001e4c:	221f      	movs	r2, #31
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43da      	mvns	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	400a      	ands	r2, r1
 8001e5a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	4618      	mov	r0, r3
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	3b41      	subs	r3, #65	; 0x41
 8001e76:	fa00 f203 	lsl.w	r2, r0, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e82:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <HAL_ADC_ConfigChannel+0x234>)
 8001e84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a21      	ldr	r2, [pc, #132]	; (8001f10 <HAL_ADC_ConfigChannel+0x238>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d109      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x1cc>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b12      	cmp	r3, #18
 8001e96:	d105      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a19      	ldr	r2, [pc, #100]	; (8001f10 <HAL_ADC_ConfigChannel+0x238>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d123      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x21e>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b10      	cmp	r3, #16
 8001eb4:	d003      	beq.n	8001ebe <HAL_ADC_ConfigChannel+0x1e6>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b11      	cmp	r3, #17
 8001ebc:	d11b      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b10      	cmp	r3, #16
 8001ed0:	d111      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ed2:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <HAL_ADC_ConfigChannel+0x23c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a10      	ldr	r2, [pc, #64]	; (8001f18 <HAL_ADC_ConfigChannel+0x240>)
 8001ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8001edc:	0c9a      	lsrs	r2, r3, #18
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ee8:	e002      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	3b01      	subs	r3, #1
 8001eee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f9      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	40012300 	.word	0x40012300
 8001f10:	40012000 	.word	0x40012000
 8001f14:	20000000 	.word	0x20000000
 8001f18:	431bde83 	.word	0x431bde83

08001f1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f24:	4b79      	ldr	r3, [pc, #484]	; (800210c <ADC_Init+0x1f0>)
 8001f26:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6859      	ldr	r1, [r3, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	021a      	lsls	r2, r3, #8
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6859      	ldr	r1, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6899      	ldr	r1, [r3, #8]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fae:	4a58      	ldr	r2, [pc, #352]	; (8002110 <ADC_Init+0x1f4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d022      	beq.n	8001ffa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6899      	ldr	r1, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fe4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6899      	ldr	r1, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	e00f      	b.n	800201a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002008:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002018:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0202 	bic.w	r2, r2, #2
 8002028:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6899      	ldr	r1, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	7e1b      	ldrb	r3, [r3, #24]
 8002034:	005a      	lsls	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	430a      	orrs	r2, r1
 800203c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d01b      	beq.n	8002080 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002056:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002066:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6859      	ldr	r1, [r3, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	3b01      	subs	r3, #1
 8002074:	035a      	lsls	r2, r3, #13
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	e007      	b.n	8002090 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800208e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800209e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	051a      	lsls	r2, r3, #20
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6899      	ldr	r1, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020d2:	025a      	lsls	r2, r3, #9
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6899      	ldr	r1, [r3, #8]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	029a      	lsls	r2, r3, #10
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	609a      	str	r2, [r3, #8]
}
 8002100:	bf00      	nop
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	40012300 	.word	0x40012300
 8002110:	0f000001 	.word	0x0f000001

08002114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <__NVIC_SetPriorityGrouping+0x44>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002130:	4013      	ands	r3, r2
 8002132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800213c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002146:	4a04      	ldr	r2, [pc, #16]	; (8002158 <__NVIC_SetPriorityGrouping+0x44>)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	60d3      	str	r3, [r2, #12]
}
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002160:	4b04      	ldr	r3, [pc, #16]	; (8002174 <__NVIC_GetPriorityGrouping+0x18>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	0a1b      	lsrs	r3, r3, #8
 8002166:	f003 0307 	and.w	r3, r3, #7
}
 800216a:	4618      	mov	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002186:	2b00      	cmp	r3, #0
 8002188:	db0b      	blt.n	80021a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	f003 021f 	and.w	r2, r3, #31
 8002190:	4907      	ldr	r1, [pc, #28]	; (80021b0 <__NVIC_EnableIRQ+0x38>)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	095b      	lsrs	r3, r3, #5
 8002198:	2001      	movs	r0, #1
 800219a:	fa00 f202 	lsl.w	r2, r0, r2
 800219e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	e000e100 	.word	0xe000e100

080021b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	6039      	str	r1, [r7, #0]
 80021be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	db0a      	blt.n	80021de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	490c      	ldr	r1, [pc, #48]	; (8002200 <__NVIC_SetPriority+0x4c>)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	0112      	lsls	r2, r2, #4
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	440b      	add	r3, r1
 80021d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021dc:	e00a      	b.n	80021f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	4908      	ldr	r1, [pc, #32]	; (8002204 <__NVIC_SetPriority+0x50>)
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	3b04      	subs	r3, #4
 80021ec:	0112      	lsls	r2, r2, #4
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	440b      	add	r3, r1
 80021f2:	761a      	strb	r2, [r3, #24]
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000e100 	.word	0xe000e100
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002208:	b480      	push	{r7}
 800220a:	b089      	sub	sp, #36	; 0x24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f1c3 0307 	rsb	r3, r3, #7
 8002222:	2b04      	cmp	r3, #4
 8002224:	bf28      	it	cs
 8002226:	2304      	movcs	r3, #4
 8002228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3304      	adds	r3, #4
 800222e:	2b06      	cmp	r3, #6
 8002230:	d902      	bls.n	8002238 <NVIC_EncodePriority+0x30>
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3b03      	subs	r3, #3
 8002236:	e000      	b.n	800223a <NVIC_EncodePriority+0x32>
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43da      	mvns	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	401a      	ands	r2, r3
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002250:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	43d9      	mvns	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002260:	4313      	orrs	r3, r2
         );
}
 8002262:	4618      	mov	r0, r3
 8002264:	3724      	adds	r7, #36	; 0x24
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3b01      	subs	r3, #1
 800227c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002280:	d301      	bcc.n	8002286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002282:	2301      	movs	r3, #1
 8002284:	e00f      	b.n	80022a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002286:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <SysTick_Config+0x40>)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800228e:	210f      	movs	r1, #15
 8002290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002294:	f7ff ff8e 	bl	80021b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002298:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <SysTick_Config+0x40>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800229e:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <SysTick_Config+0x40>)
 80022a0:	2207      	movs	r2, #7
 80022a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	e000e010 	.word	0xe000e010

080022b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ff29 	bl	8002114 <__NVIC_SetPriorityGrouping>
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	4603      	mov	r3, r0
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
 80022d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022dc:	f7ff ff3e 	bl	800215c <__NVIC_GetPriorityGrouping>
 80022e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	6978      	ldr	r0, [r7, #20]
 80022e8:	f7ff ff8e 	bl	8002208 <NVIC_EncodePriority>
 80022ec:	4602      	mov	r2, r0
 80022ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff5d 	bl	80021b4 <__NVIC_SetPriority>
}
 80022fa:	bf00      	nop
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800230c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff ff31 	bl	8002178 <__NVIC_EnableIRQ>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff ffa2 	bl	8002270 <SysTick_Config>
 800232c:	4603      	mov	r3, r0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	; 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002346:	2300      	movs	r3, #0
 8002348:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800234a:	2300      	movs	r3, #0
 800234c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	e16b      	b.n	800262c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002354:	2201      	movs	r2, #1
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	429a      	cmp	r2, r3
 800236e:	f040 815a 	bne.w	8002626 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d00b      	beq.n	8002392 <HAL_GPIO_Init+0x5a>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d007      	beq.n	8002392 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002386:	2b11      	cmp	r3, #17
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b12      	cmp	r3, #18
 8002390:	d130      	bne.n	80023f4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	2203      	movs	r2, #3
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4013      	ands	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023c8:	2201      	movs	r2, #1
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	091b      	lsrs	r3, r3, #4
 80023de:	f003 0201 	and.w	r2, r3, #1
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	2203      	movs	r2, #3
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0xfc>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b12      	cmp	r3, #18
 8002432:	d123      	bne.n	800247c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	08da      	lsrs	r2, r3, #3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3208      	adds	r2, #8
 800243c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	220f      	movs	r2, #15
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	08da      	lsrs	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3208      	adds	r2, #8
 8002476:	69b9      	ldr	r1, [r7, #24]
 8002478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	2203      	movs	r2, #3
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0203 	and.w	r2, r3, #3
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80b4 	beq.w	8002626 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	4b5f      	ldr	r3, [pc, #380]	; (8002640 <HAL_GPIO_Init+0x308>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	4a5e      	ldr	r2, [pc, #376]	; (8002640 <HAL_GPIO_Init+0x308>)
 80024c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024cc:	6453      	str	r3, [r2, #68]	; 0x44
 80024ce:	4b5c      	ldr	r3, [pc, #368]	; (8002640 <HAL_GPIO_Init+0x308>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024da:	4a5a      	ldr	r2, [pc, #360]	; (8002644 <HAL_GPIO_Init+0x30c>)
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	089b      	lsrs	r3, r3, #2
 80024e0:	3302      	adds	r3, #2
 80024e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	220f      	movs	r2, #15
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a51      	ldr	r2, [pc, #324]	; (8002648 <HAL_GPIO_Init+0x310>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d02b      	beq.n	800255e <HAL_GPIO_Init+0x226>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a50      	ldr	r2, [pc, #320]	; (800264c <HAL_GPIO_Init+0x314>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d025      	beq.n	800255a <HAL_GPIO_Init+0x222>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a4f      	ldr	r2, [pc, #316]	; (8002650 <HAL_GPIO_Init+0x318>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d01f      	beq.n	8002556 <HAL_GPIO_Init+0x21e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a4e      	ldr	r2, [pc, #312]	; (8002654 <HAL_GPIO_Init+0x31c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d019      	beq.n	8002552 <HAL_GPIO_Init+0x21a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a4d      	ldr	r2, [pc, #308]	; (8002658 <HAL_GPIO_Init+0x320>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d013      	beq.n	800254e <HAL_GPIO_Init+0x216>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a4c      	ldr	r2, [pc, #304]	; (800265c <HAL_GPIO_Init+0x324>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d00d      	beq.n	800254a <HAL_GPIO_Init+0x212>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a4b      	ldr	r2, [pc, #300]	; (8002660 <HAL_GPIO_Init+0x328>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d007      	beq.n	8002546 <HAL_GPIO_Init+0x20e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a4a      	ldr	r2, [pc, #296]	; (8002664 <HAL_GPIO_Init+0x32c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d101      	bne.n	8002542 <HAL_GPIO_Init+0x20a>
 800253e:	2307      	movs	r3, #7
 8002540:	e00e      	b.n	8002560 <HAL_GPIO_Init+0x228>
 8002542:	2308      	movs	r3, #8
 8002544:	e00c      	b.n	8002560 <HAL_GPIO_Init+0x228>
 8002546:	2306      	movs	r3, #6
 8002548:	e00a      	b.n	8002560 <HAL_GPIO_Init+0x228>
 800254a:	2305      	movs	r3, #5
 800254c:	e008      	b.n	8002560 <HAL_GPIO_Init+0x228>
 800254e:	2304      	movs	r3, #4
 8002550:	e006      	b.n	8002560 <HAL_GPIO_Init+0x228>
 8002552:	2303      	movs	r3, #3
 8002554:	e004      	b.n	8002560 <HAL_GPIO_Init+0x228>
 8002556:	2302      	movs	r3, #2
 8002558:	e002      	b.n	8002560 <HAL_GPIO_Init+0x228>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <HAL_GPIO_Init+0x228>
 800255e:	2300      	movs	r3, #0
 8002560:	69fa      	ldr	r2, [r7, #28]
 8002562:	f002 0203 	and.w	r2, r2, #3
 8002566:	0092      	lsls	r2, r2, #2
 8002568:	4093      	lsls	r3, r2
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4313      	orrs	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002570:	4934      	ldr	r1, [pc, #208]	; (8002644 <HAL_GPIO_Init+0x30c>)
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	089b      	lsrs	r3, r3, #2
 8002576:	3302      	adds	r3, #2
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800257e:	4b3a      	ldr	r3, [pc, #232]	; (8002668 <HAL_GPIO_Init+0x330>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	43db      	mvns	r3, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025a2:	4a31      	ldr	r2, [pc, #196]	; (8002668 <HAL_GPIO_Init+0x330>)
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025a8:	4b2f      	ldr	r3, [pc, #188]	; (8002668 <HAL_GPIO_Init+0x330>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025cc:	4a26      	ldr	r2, [pc, #152]	; (8002668 <HAL_GPIO_Init+0x330>)
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025d2:	4b25      	ldr	r3, [pc, #148]	; (8002668 <HAL_GPIO_Init+0x330>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025f6:	4a1c      	ldr	r2, [pc, #112]	; (8002668 <HAL_GPIO_Init+0x330>)
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025fc:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <HAL_GPIO_Init+0x330>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002620:	4a11      	ldr	r2, [pc, #68]	; (8002668 <HAL_GPIO_Init+0x330>)
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3301      	adds	r3, #1
 800262a:	61fb      	str	r3, [r7, #28]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	2b0f      	cmp	r3, #15
 8002630:	f67f ae90 	bls.w	8002354 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002634:	bf00      	nop
 8002636:	3724      	adds	r7, #36	; 0x24
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	40023800 	.word	0x40023800
 8002644:	40013800 	.word	0x40013800
 8002648:	40020000 	.word	0x40020000
 800264c:	40020400 	.word	0x40020400
 8002650:	40020800 	.word	0x40020800
 8002654:	40020c00 	.word	0x40020c00
 8002658:	40021000 	.word	0x40021000
 800265c:	40021400 	.word	0x40021400
 8002660:	40021800 	.word	0x40021800
 8002664:	40021c00 	.word	0x40021c00
 8002668:	40013c00 	.word	0x40013c00

0800266c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	807b      	strh	r3, [r7, #2]
 8002678:	4613      	mov	r3, r2
 800267a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800267c:	787b      	ldrb	r3, [r7, #1]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002682:	887a      	ldrh	r2, [r7, #2]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002688:	e003      	b.n	8002692 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800268a:	887b      	ldrh	r3, [r7, #2]
 800268c:	041a      	lsls	r2, r3, #16
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	619a      	str	r2, [r3, #24]
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e25b      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d075      	beq.n	80027aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026be:	4ba3      	ldr	r3, [pc, #652]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 030c 	and.w	r3, r3, #12
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d00c      	beq.n	80026e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ca:	4ba0      	ldr	r3, [pc, #640]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d112      	bne.n	80026fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026d6:	4b9d      	ldr	r3, [pc, #628]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026e2:	d10b      	bne.n	80026fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e4:	4b99      	ldr	r3, [pc, #612]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d05b      	beq.n	80027a8 <HAL_RCC_OscConfig+0x108>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d157      	bne.n	80027a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e236      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002704:	d106      	bne.n	8002714 <HAL_RCC_OscConfig+0x74>
 8002706:	4b91      	ldr	r3, [pc, #580]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a90      	ldr	r2, [pc, #576]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 800270c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e01d      	b.n	8002750 <HAL_RCC_OscConfig+0xb0>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800271c:	d10c      	bne.n	8002738 <HAL_RCC_OscConfig+0x98>
 800271e:	4b8b      	ldr	r3, [pc, #556]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a8a      	ldr	r2, [pc, #552]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	4b88      	ldr	r3, [pc, #544]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a87      	ldr	r2, [pc, #540]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e00b      	b.n	8002750 <HAL_RCC_OscConfig+0xb0>
 8002738:	4b84      	ldr	r3, [pc, #528]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a83      	ldr	r2, [pc, #524]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 800273e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	4b81      	ldr	r3, [pc, #516]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a80      	ldr	r2, [pc, #512]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 800274a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800274e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d013      	beq.n	8002780 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002758:	f7ff f8c2 	bl	80018e0 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002760:	f7ff f8be 	bl	80018e0 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b64      	cmp	r3, #100	; 0x64
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e1fb      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002772:	4b76      	ldr	r3, [pc, #472]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0xc0>
 800277e:	e014      	b.n	80027aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002780:	f7ff f8ae 	bl	80018e0 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002788:	f7ff f8aa 	bl	80018e0 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b64      	cmp	r3, #100	; 0x64
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e1e7      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279a:	4b6c      	ldr	r3, [pc, #432]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f0      	bne.n	8002788 <HAL_RCC_OscConfig+0xe8>
 80027a6:	e000      	b.n	80027aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d063      	beq.n	800287e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027b6:	4b65      	ldr	r3, [pc, #404]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00b      	beq.n	80027da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027c2:	4b62      	ldr	r3, [pc, #392]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d11c      	bne.n	8002808 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ce:	4b5f      	ldr	r3, [pc, #380]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d116      	bne.n	8002808 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027da:	4b5c      	ldr	r3, [pc, #368]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <HAL_RCC_OscConfig+0x152>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d001      	beq.n	80027f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e1bb      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f2:	4b56      	ldr	r3, [pc, #344]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4952      	ldr	r1, [pc, #328]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002806:	e03a      	b.n	800287e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d020      	beq.n	8002852 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002810:	4b4f      	ldr	r3, [pc, #316]	; (8002950 <HAL_RCC_OscConfig+0x2b0>)
 8002812:	2201      	movs	r2, #1
 8002814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002816:	f7ff f863 	bl	80018e0 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800281e:	f7ff f85f 	bl	80018e0 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e19c      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002830:	4b46      	ldr	r3, [pc, #280]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283c:	4b43      	ldr	r3, [pc, #268]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4940      	ldr	r1, [pc, #256]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 800284c:	4313      	orrs	r3, r2
 800284e:	600b      	str	r3, [r1, #0]
 8002850:	e015      	b.n	800287e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002852:	4b3f      	ldr	r3, [pc, #252]	; (8002950 <HAL_RCC_OscConfig+0x2b0>)
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7ff f842 	bl	80018e0 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002860:	f7ff f83e 	bl	80018e0 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e17b      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002872:	4b36      	ldr	r3, [pc, #216]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d030      	beq.n	80028ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d016      	beq.n	80028c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002892:	4b30      	ldr	r3, [pc, #192]	; (8002954 <HAL_RCC_OscConfig+0x2b4>)
 8002894:	2201      	movs	r2, #1
 8002896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002898:	f7ff f822 	bl	80018e0 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028a0:	f7ff f81e 	bl	80018e0 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e15b      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b2:	4b26      	ldr	r3, [pc, #152]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80028b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x200>
 80028be:	e015      	b.n	80028ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028c0:	4b24      	ldr	r3, [pc, #144]	; (8002954 <HAL_RCC_OscConfig+0x2b4>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c6:	f7ff f80b 	bl	80018e0 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ce:	f7ff f807 	bl	80018e0 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e144      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e0:	4b1a      	ldr	r3, [pc, #104]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80028e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f0      	bne.n	80028ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 80a0 	beq.w	8002a3a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028fa:	2300      	movs	r3, #0
 80028fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028fe:	4b13      	ldr	r3, [pc, #76]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10f      	bne.n	800292a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	4b0f      	ldr	r3, [pc, #60]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	4a0e      	ldr	r2, [pc, #56]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002918:	6413      	str	r3, [r2, #64]	; 0x40
 800291a:	4b0c      	ldr	r3, [pc, #48]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002926:	2301      	movs	r3, #1
 8002928:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292a:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <HAL_RCC_OscConfig+0x2b8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002932:	2b00      	cmp	r3, #0
 8002934:	d121      	bne.n	800297a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002936:	4b08      	ldr	r3, [pc, #32]	; (8002958 <HAL_RCC_OscConfig+0x2b8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a07      	ldr	r2, [pc, #28]	; (8002958 <HAL_RCC_OscConfig+0x2b8>)
 800293c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002942:	f7fe ffcd 	bl	80018e0 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002948:	e011      	b.n	800296e <HAL_RCC_OscConfig+0x2ce>
 800294a:	bf00      	nop
 800294c:	40023800 	.word	0x40023800
 8002950:	42470000 	.word	0x42470000
 8002954:	42470e80 	.word	0x42470e80
 8002958:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295c:	f7fe ffc0 	bl	80018e0 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e0fd      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296e:	4b81      	ldr	r3, [pc, #516]	; (8002b74 <HAL_RCC_OscConfig+0x4d4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d106      	bne.n	8002990 <HAL_RCC_OscConfig+0x2f0>
 8002982:	4b7d      	ldr	r3, [pc, #500]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002986:	4a7c      	ldr	r2, [pc, #496]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6713      	str	r3, [r2, #112]	; 0x70
 800298e:	e01c      	b.n	80029ca <HAL_RCC_OscConfig+0x32a>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b05      	cmp	r3, #5
 8002996:	d10c      	bne.n	80029b2 <HAL_RCC_OscConfig+0x312>
 8002998:	4b77      	ldr	r3, [pc, #476]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299c:	4a76      	ldr	r2, [pc, #472]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 800299e:	f043 0304 	orr.w	r3, r3, #4
 80029a2:	6713      	str	r3, [r2, #112]	; 0x70
 80029a4:	4b74      	ldr	r3, [pc, #464]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a8:	4a73      	ldr	r2, [pc, #460]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6713      	str	r3, [r2, #112]	; 0x70
 80029b0:	e00b      	b.n	80029ca <HAL_RCC_OscConfig+0x32a>
 80029b2:	4b71      	ldr	r3, [pc, #452]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b6:	4a70      	ldr	r2, [pc, #448]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 80029b8:	f023 0301 	bic.w	r3, r3, #1
 80029bc:	6713      	str	r3, [r2, #112]	; 0x70
 80029be:	4b6e      	ldr	r3, [pc, #440]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	4a6d      	ldr	r2, [pc, #436]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 80029c4:	f023 0304 	bic.w	r3, r3, #4
 80029c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d015      	beq.n	80029fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d2:	f7fe ff85 	bl	80018e0 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d8:	e00a      	b.n	80029f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029da:	f7fe ff81 	bl	80018e0 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e0bc      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f0:	4b61      	ldr	r3, [pc, #388]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0ee      	beq.n	80029da <HAL_RCC_OscConfig+0x33a>
 80029fc:	e014      	b.n	8002a28 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fe:	f7fe ff6f 	bl	80018e0 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a04:	e00a      	b.n	8002a1c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a06:	f7fe ff6b 	bl	80018e0 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e0a6      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a1c:	4b56      	ldr	r3, [pc, #344]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1ee      	bne.n	8002a06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a28:	7dfb      	ldrb	r3, [r7, #23]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d105      	bne.n	8002a3a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2e:	4b52      	ldr	r3, [pc, #328]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	4a51      	ldr	r2, [pc, #324]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 8002a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 8092 	beq.w	8002b68 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a44:	4b4c      	ldr	r3, [pc, #304]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 030c 	and.w	r3, r3, #12
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d05c      	beq.n	8002b0a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d141      	bne.n	8002adc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a58:	4b48      	ldr	r3, [pc, #288]	; (8002b7c <HAL_RCC_OscConfig+0x4dc>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5e:	f7fe ff3f 	bl	80018e0 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a66:	f7fe ff3b 	bl	80018e0 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e078      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a78:	4b3f      	ldr	r3, [pc, #252]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1f0      	bne.n	8002a66 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69da      	ldr	r2, [r3, #28]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	019b      	lsls	r3, r3, #6
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9a:	085b      	lsrs	r3, r3, #1
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	041b      	lsls	r3, r3, #16
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	061b      	lsls	r3, r3, #24
 8002aa8:	4933      	ldr	r1, [pc, #204]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aae:	4b33      	ldr	r3, [pc, #204]	; (8002b7c <HAL_RCC_OscConfig+0x4dc>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7fe ff14 	bl	80018e0 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002abc:	f7fe ff10 	bl	80018e0 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e04d      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ace:	4b2a      	ldr	r3, [pc, #168]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0x41c>
 8002ada:	e045      	b.n	8002b68 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002adc:	4b27      	ldr	r3, [pc, #156]	; (8002b7c <HAL_RCC_OscConfig+0x4dc>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae2:	f7fe fefd 	bl	80018e0 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aea:	f7fe fef9 	bl	80018e0 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e036      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afc:	4b1e      	ldr	r3, [pc, #120]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f0      	bne.n	8002aea <HAL_RCC_OscConfig+0x44a>
 8002b08:	e02e      	b.n	8002b68 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d101      	bne.n	8002b16 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e029      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b16:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d11c      	bne.n	8002b64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d115      	bne.n	8002b64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b3e:	4013      	ands	r3, r2
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d10d      	bne.n	8002b64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d106      	bne.n	8002b64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40007000 	.word	0x40007000
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	42470060 	.word	0x42470060

08002b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0cc      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b94:	4b68      	ldr	r3, [pc, #416]	; (8002d38 <HAL_RCC_ClockConfig+0x1b8>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 030f 	and.w	r3, r3, #15
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d90c      	bls.n	8002bbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba2:	4b65      	ldr	r3, [pc, #404]	; (8002d38 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002baa:	4b63      	ldr	r3, [pc, #396]	; (8002d38 <HAL_RCC_ClockConfig+0x1b8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d001      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e0b8      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d020      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bd4:	4b59      	ldr	r3, [pc, #356]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	4a58      	ldr	r2, [pc, #352]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bec:	4b53      	ldr	r3, [pc, #332]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	4a52      	ldr	r2, [pc, #328]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf8:	4b50      	ldr	r3, [pc, #320]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	494d      	ldr	r1, [pc, #308]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d044      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d107      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1e:	4b47      	ldr	r3, [pc, #284]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d119      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e07f      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d003      	beq.n	8002c3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	d107      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3e:	4b3f      	ldr	r3, [pc, #252]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d109      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e06f      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4e:	4b3b      	ldr	r3, [pc, #236]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e067      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c5e:	4b37      	ldr	r3, [pc, #220]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f023 0203 	bic.w	r2, r3, #3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	4934      	ldr	r1, [pc, #208]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c70:	f7fe fe36 	bl	80018e0 <HAL_GetTick>
 8002c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c76:	e00a      	b.n	8002c8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c78:	f7fe fe32 	bl	80018e0 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e04f      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8e:	4b2b      	ldr	r3, [pc, #172]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 020c 	and.w	r2, r3, #12
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d1eb      	bne.n	8002c78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ca0:	4b25      	ldr	r3, [pc, #148]	; (8002d38 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 030f 	and.w	r3, r3, #15
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d20c      	bcs.n	8002cc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cae:	4b22      	ldr	r3, [pc, #136]	; (8002d38 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb6:	4b20      	ldr	r3, [pc, #128]	; (8002d38 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e032      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d008      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd4:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	4916      	ldr	r1, [pc, #88]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0308 	and.w	r3, r3, #8
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d009      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cf2:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	490e      	ldr	r1, [pc, #56]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d06:	f000 f821 	bl	8002d4c <HAL_RCC_GetSysClockFreq>
 8002d0a:	4601      	mov	r1, r0
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	091b      	lsrs	r3, r3, #4
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	4a0a      	ldr	r2, [pc, #40]	; (8002d40 <HAL_RCC_ClockConfig+0x1c0>)
 8002d18:	5cd3      	ldrb	r3, [r2, r3]
 8002d1a:	fa21 f303 	lsr.w	r3, r1, r3
 8002d1e:	4a09      	ldr	r2, [pc, #36]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d22:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <HAL_RCC_ClockConfig+0x1c8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe fd96 	bl	8001858 <HAL_InitTick>

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40023c00 	.word	0x40023c00
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	080041e0 	.word	0x080041e0
 8002d44:	20000000 	.word	0x20000000
 8002d48:	20000004 	.word	0x20000004

08002d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	607b      	str	r3, [r7, #4]
 8002d56:	2300      	movs	r3, #0
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d62:	4b50      	ldr	r3, [pc, #320]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 030c 	and.w	r3, r3, #12
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d007      	beq.n	8002d7e <HAL_RCC_GetSysClockFreq+0x32>
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d008      	beq.n	8002d84 <HAL_RCC_GetSysClockFreq+0x38>
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f040 808d 	bne.w	8002e92 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d78:	4b4b      	ldr	r3, [pc, #300]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002d7a:	60bb      	str	r3, [r7, #8]
       break;
 8002d7c:	e08c      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d7e:	4b4b      	ldr	r3, [pc, #300]	; (8002eac <HAL_RCC_GetSysClockFreq+0x160>)
 8002d80:	60bb      	str	r3, [r7, #8]
      break;
 8002d82:	e089      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d84:	4b47      	ldr	r3, [pc, #284]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d8c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d8e:	4b45      	ldr	r3, [pc, #276]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d023      	beq.n	8002de2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d9a:	4b42      	ldr	r3, [pc, #264]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	099b      	lsrs	r3, r3, #6
 8002da0:	f04f 0400 	mov.w	r4, #0
 8002da4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	ea03 0501 	and.w	r5, r3, r1
 8002db0:	ea04 0602 	and.w	r6, r4, r2
 8002db4:	4a3d      	ldr	r2, [pc, #244]	; (8002eac <HAL_RCC_GetSysClockFreq+0x160>)
 8002db6:	fb02 f106 	mul.w	r1, r2, r6
 8002dba:	2200      	movs	r2, #0
 8002dbc:	fb02 f205 	mul.w	r2, r2, r5
 8002dc0:	440a      	add	r2, r1
 8002dc2:	493a      	ldr	r1, [pc, #232]	; (8002eac <HAL_RCC_GetSysClockFreq+0x160>)
 8002dc4:	fba5 0101 	umull	r0, r1, r5, r1
 8002dc8:	1853      	adds	r3, r2, r1
 8002dca:	4619      	mov	r1, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f04f 0400 	mov.w	r4, #0
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4623      	mov	r3, r4
 8002dd6:	f7fd f9f7 	bl	80001c8 <__aeabi_uldivmod>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	460c      	mov	r4, r1
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	e049      	b.n	8002e76 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de2:	4b30      	ldr	r3, [pc, #192]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	099b      	lsrs	r3, r3, #6
 8002de8:	f04f 0400 	mov.w	r4, #0
 8002dec:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	ea03 0501 	and.w	r5, r3, r1
 8002df8:	ea04 0602 	and.w	r6, r4, r2
 8002dfc:	4629      	mov	r1, r5
 8002dfe:	4632      	mov	r2, r6
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	f04f 0400 	mov.w	r4, #0
 8002e08:	0154      	lsls	r4, r2, #5
 8002e0a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e0e:	014b      	lsls	r3, r1, #5
 8002e10:	4619      	mov	r1, r3
 8002e12:	4622      	mov	r2, r4
 8002e14:	1b49      	subs	r1, r1, r5
 8002e16:	eb62 0206 	sbc.w	r2, r2, r6
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	f04f 0400 	mov.w	r4, #0
 8002e22:	0194      	lsls	r4, r2, #6
 8002e24:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e28:	018b      	lsls	r3, r1, #6
 8002e2a:	1a5b      	subs	r3, r3, r1
 8002e2c:	eb64 0402 	sbc.w	r4, r4, r2
 8002e30:	f04f 0100 	mov.w	r1, #0
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	00e2      	lsls	r2, r4, #3
 8002e3a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e3e:	00d9      	lsls	r1, r3, #3
 8002e40:	460b      	mov	r3, r1
 8002e42:	4614      	mov	r4, r2
 8002e44:	195b      	adds	r3, r3, r5
 8002e46:	eb44 0406 	adc.w	r4, r4, r6
 8002e4a:	f04f 0100 	mov.w	r1, #0
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	02a2      	lsls	r2, r4, #10
 8002e54:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e58:	0299      	lsls	r1, r3, #10
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	4614      	mov	r4, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	4621      	mov	r1, r4
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f04f 0400 	mov.w	r4, #0
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4623      	mov	r3, r4
 8002e6c:	f7fd f9ac 	bl	80001c8 <__aeabi_uldivmod>
 8002e70:	4603      	mov	r3, r0
 8002e72:	460c      	mov	r4, r1
 8002e74:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e76:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	0c1b      	lsrs	r3, r3, #16
 8002e7c:	f003 0303 	and.w	r3, r3, #3
 8002e80:	3301      	adds	r3, #1
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8e:	60bb      	str	r3, [r7, #8]
      break;
 8002e90:	e002      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e92:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002e94:	60bb      	str	r3, [r7, #8]
      break;
 8002e96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e98:	68bb      	ldr	r3, [r7, #8]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	00f42400 	.word	0x00f42400
 8002eac:	017d7840 	.word	0x017d7840

08002eb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e01d      	b.n	8002efe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fe fb96 	bl	8001608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3304      	adds	r3, #4
 8002eec:	4619      	mov	r1, r3
 8002eee:	4610      	mov	r0, r2
 8002ef0:	f000 fc64 	bl	80037bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e01d      	b.n	8002f54 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d106      	bne.n	8002f32 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f815 	bl	8002f5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2202      	movs	r2, #2
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3304      	adds	r3, #4
 8002f42:	4619      	mov	r1, r3
 8002f44:	4610      	mov	r0, r2
 8002f46:	f000 fc39 	bl	80037bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	6839      	ldr	r1, [r7, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f001 f82e 	bl	8003fe4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a15      	ldr	r2, [pc, #84]	; (8002fe4 <HAL_TIM_PWM_Start+0x74>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d004      	beq.n	8002f9c <HAL_TIM_PWM_Start+0x2c>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a14      	ldr	r2, [pc, #80]	; (8002fe8 <HAL_TIM_PWM_Start+0x78>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d101      	bne.n	8002fa0 <HAL_TIM_PWM_Start+0x30>
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <HAL_TIM_PWM_Start+0x32>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d007      	beq.n	8002fb6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2b06      	cmp	r3, #6
 8002fc6:	d007      	beq.n	8002fd8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40010000 	.word	0x40010000
 8002fe8:	40010400 	.word	0x40010400

08002fec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e01d      	b.n	800303a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f815 	bl	8003042 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3304      	adds	r3, #4
 8003028:	4619      	mov	r1, r3
 800302a:	4610      	mov	r0, r2
 800302c:	f000 fbc6 	bl	80037bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
	...

08003058 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b0c      	cmp	r3, #12
 8003066:	d841      	bhi.n	80030ec <HAL_TIM_IC_Start_IT+0x94>
 8003068:	a201      	add	r2, pc, #4	; (adr r2, 8003070 <HAL_TIM_IC_Start_IT+0x18>)
 800306a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306e:	bf00      	nop
 8003070:	080030a5 	.word	0x080030a5
 8003074:	080030ed 	.word	0x080030ed
 8003078:	080030ed 	.word	0x080030ed
 800307c:	080030ed 	.word	0x080030ed
 8003080:	080030b7 	.word	0x080030b7
 8003084:	080030ed 	.word	0x080030ed
 8003088:	080030ed 	.word	0x080030ed
 800308c:	080030ed 	.word	0x080030ed
 8003090:	080030c9 	.word	0x080030c9
 8003094:	080030ed 	.word	0x080030ed
 8003098:	080030ed 	.word	0x080030ed
 800309c:	080030ed 	.word	0x080030ed
 80030a0:	080030db 	.word	0x080030db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0202 	orr.w	r2, r2, #2
 80030b2:	60da      	str	r2, [r3, #12]
      break;
 80030b4:	e01b      	b.n	80030ee <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f042 0204 	orr.w	r2, r2, #4
 80030c4:	60da      	str	r2, [r3, #12]
      break;
 80030c6:	e012      	b.n	80030ee <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0208 	orr.w	r2, r2, #8
 80030d6:	60da      	str	r2, [r3, #12]
      break;
 80030d8:	e009      	b.n	80030ee <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f042 0210 	orr.w	r2, r2, #16
 80030e8:	60da      	str	r2, [r3, #12]
      break;
 80030ea:	e000      	b.n	80030ee <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80030ec:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2201      	movs	r2, #1
 80030f4:	6839      	ldr	r1, [r7, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 ff74 	bl	8003fe4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b06      	cmp	r3, #6
 800310c:	d007      	beq.n	800311e <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0201 	orr.w	r2, r2, #1
 800311c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b02      	cmp	r3, #2
 800313c:	d122      	bne.n	8003184 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b02      	cmp	r3, #2
 800314a:	d11b      	bne.n	8003184 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f06f 0202 	mvn.w	r2, #2
 8003154:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7fd fea2 	bl	8000eb4 <HAL_TIM_IC_CaptureCallback>
 8003170:	e005      	b.n	800317e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fb03 	bl	800377e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fb0a 	bl	8003792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	2b04      	cmp	r3, #4
 8003190:	d122      	bne.n	80031d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b04      	cmp	r3, #4
 800319e:	d11b      	bne.n	80031d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0204 	mvn.w	r2, #4
 80031a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2202      	movs	r2, #2
 80031ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fd fe78 	bl	8000eb4 <HAL_TIM_IC_CaptureCallback>
 80031c4:	e005      	b.n	80031d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fad9 	bl	800377e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 fae0 	bl	8003792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d122      	bne.n	800322c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d11b      	bne.n	800322c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f06f 0208 	mvn.w	r2, #8
 80031fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2204      	movs	r2, #4
 8003202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7fd fe4e 	bl	8000eb4 <HAL_TIM_IC_CaptureCallback>
 8003218:	e005      	b.n	8003226 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 faaf 	bl	800377e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 fab6 	bl	8003792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f003 0310 	and.w	r3, r3, #16
 8003236:	2b10      	cmp	r3, #16
 8003238:	d122      	bne.n	8003280 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	2b10      	cmp	r3, #16
 8003246:	d11b      	bne.n	8003280 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f06f 0210 	mvn.w	r2, #16
 8003250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2208      	movs	r2, #8
 8003256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7fd fe24 	bl	8000eb4 <HAL_TIM_IC_CaptureCallback>
 800326c:	e005      	b.n	800327a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 fa85 	bl	800377e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 fa8c 	bl	8003792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b01      	cmp	r3, #1
 800328c:	d10e      	bne.n	80032ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b01      	cmp	r3, #1
 800329a:	d107      	bne.n	80032ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f06f 0201 	mvn.w	r2, #1
 80032a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 fa5f 	bl	800376a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b6:	2b80      	cmp	r3, #128	; 0x80
 80032b8:	d10e      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c4:	2b80      	cmp	r3, #128	; 0x80
 80032c6:	d107      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 ff32 	bl	800413c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e2:	2b40      	cmp	r3, #64	; 0x40
 80032e4:	d10e      	bne.n	8003304 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f0:	2b40      	cmp	r3, #64	; 0x40
 80032f2:	d107      	bne.n	8003304 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fa51 	bl	80037a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	f003 0320 	and.w	r3, r3, #32
 800330e:	2b20      	cmp	r3, #32
 8003310:	d10e      	bne.n	8003330 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 0320 	and.w	r3, r3, #32
 800331c:	2b20      	cmp	r3, #32
 800331e:	d107      	bne.n	8003330 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0220 	mvn.w	r2, #32
 8003328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 fefc 	bl	8004128 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003330:	bf00      	nop
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800334a:	2b01      	cmp	r3, #1
 800334c:	d101      	bne.n	8003352 <HAL_TIM_IC_ConfigChannel+0x1a>
 800334e:	2302      	movs	r3, #2
 8003350:	e08a      	b.n	8003468 <HAL_TIM_IC_ConfigChannel+0x130>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2202      	movs	r2, #2
 800335e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d11b      	bne.n	80033a0 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6818      	ldr	r0, [r3, #0]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	6819      	ldr	r1, [r3, #0]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f000 fc70 	bl	8003c5c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699a      	ldr	r2, [r3, #24]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 020c 	bic.w	r2, r2, #12
 800338a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6999      	ldr	r1, [r3, #24]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	619a      	str	r2, [r3, #24]
 800339e:	e05a      	b.n	8003456 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d11c      	bne.n	80033e0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6818      	ldr	r0, [r3, #0]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	6819      	ldr	r1, [r3, #0]
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f000 fcf4 	bl	8003da2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	699a      	ldr	r2, [r3, #24]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80033c8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6999      	ldr	r1, [r3, #24]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	021a      	lsls	r2, r3, #8
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	619a      	str	r2, [r3, #24]
 80033de:	e03a      	b.n	8003456 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	d11b      	bne.n	800341e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	6819      	ldr	r1, [r3, #0]
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f000 fd41 	bl	8003e7c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69da      	ldr	r2, [r3, #28]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 020c 	bic.w	r2, r2, #12
 8003408:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	69d9      	ldr	r1, [r3, #28]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	61da      	str	r2, [r3, #28]
 800341c:	e01b      	b.n	8003456 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	6819      	ldr	r1, [r3, #0]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f000 fd61 	bl	8003ef4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	69da      	ldr	r2, [r3, #28]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003440:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	69d9      	ldr	r1, [r3, #28]
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	021a      	lsls	r2, r3, #8
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003482:	2b01      	cmp	r3, #1
 8003484:	d101      	bne.n	800348a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003486:	2302      	movs	r3, #2
 8003488:	e0b4      	b.n	80035f4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2202      	movs	r2, #2
 8003496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b0c      	cmp	r3, #12
 800349e:	f200 809f 	bhi.w	80035e0 <HAL_TIM_PWM_ConfigChannel+0x170>
 80034a2:	a201      	add	r2, pc, #4	; (adr r2, 80034a8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80034a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a8:	080034dd 	.word	0x080034dd
 80034ac:	080035e1 	.word	0x080035e1
 80034b0:	080035e1 	.word	0x080035e1
 80034b4:	080035e1 	.word	0x080035e1
 80034b8:	0800351d 	.word	0x0800351d
 80034bc:	080035e1 	.word	0x080035e1
 80034c0:	080035e1 	.word	0x080035e1
 80034c4:	080035e1 	.word	0x080035e1
 80034c8:	0800355f 	.word	0x0800355f
 80034cc:	080035e1 	.word	0x080035e1
 80034d0:	080035e1 	.word	0x080035e1
 80034d4:	080035e1 	.word	0x080035e1
 80034d8:	0800359f 	.word	0x0800359f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68b9      	ldr	r1, [r7, #8]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fa0a 	bl	80038fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0208 	orr.w	r2, r2, #8
 80034f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699a      	ldr	r2, [r3, #24]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0204 	bic.w	r2, r2, #4
 8003506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6999      	ldr	r1, [r3, #24]
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	691a      	ldr	r2, [r3, #16]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	619a      	str	r2, [r3, #24]
      break;
 800351a:	e062      	b.n	80035e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68b9      	ldr	r1, [r7, #8]
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fa5a 	bl	80039dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	699a      	ldr	r2, [r3, #24]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6999      	ldr	r1, [r3, #24]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	021a      	lsls	r2, r3, #8
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	619a      	str	r2, [r3, #24]
      break;
 800355c:	e041      	b.n	80035e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68b9      	ldr	r1, [r7, #8]
 8003564:	4618      	mov	r0, r3
 8003566:	f000 faaf 	bl	8003ac8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	69da      	ldr	r2, [r3, #28]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f042 0208 	orr.w	r2, r2, #8
 8003578:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	69da      	ldr	r2, [r3, #28]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0204 	bic.w	r2, r2, #4
 8003588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	69d9      	ldr	r1, [r3, #28]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	691a      	ldr	r2, [r3, #16]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	61da      	str	r2, [r3, #28]
      break;
 800359c:	e021      	b.n	80035e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68b9      	ldr	r1, [r7, #8]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 fb03 	bl	8003bb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	69da      	ldr	r2, [r3, #28]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	69da      	ldr	r2, [r3, #28]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69d9      	ldr	r1, [r3, #28]
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	021a      	lsls	r2, r3, #8
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	61da      	str	r2, [r3, #28]
      break;
 80035de:	e000      	b.n	80035e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80035e0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800360c:	2b01      	cmp	r3, #1
 800360e:	d101      	bne.n	8003614 <HAL_TIM_ConfigClockSource+0x18>
 8003610:	2302      	movs	r3, #2
 8003612:	e0a6      	b.n	8003762 <HAL_TIM_ConfigClockSource+0x166>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2202      	movs	r2, #2
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003632:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800363a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b40      	cmp	r3, #64	; 0x40
 800364a:	d067      	beq.n	800371c <HAL_TIM_ConfigClockSource+0x120>
 800364c:	2b40      	cmp	r3, #64	; 0x40
 800364e:	d80b      	bhi.n	8003668 <HAL_TIM_ConfigClockSource+0x6c>
 8003650:	2b10      	cmp	r3, #16
 8003652:	d073      	beq.n	800373c <HAL_TIM_ConfigClockSource+0x140>
 8003654:	2b10      	cmp	r3, #16
 8003656:	d802      	bhi.n	800365e <HAL_TIM_ConfigClockSource+0x62>
 8003658:	2b00      	cmp	r3, #0
 800365a:	d06f      	beq.n	800373c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800365c:	e078      	b.n	8003750 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800365e:	2b20      	cmp	r3, #32
 8003660:	d06c      	beq.n	800373c <HAL_TIM_ConfigClockSource+0x140>
 8003662:	2b30      	cmp	r3, #48	; 0x30
 8003664:	d06a      	beq.n	800373c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003666:	e073      	b.n	8003750 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003668:	2b70      	cmp	r3, #112	; 0x70
 800366a:	d00d      	beq.n	8003688 <HAL_TIM_ConfigClockSource+0x8c>
 800366c:	2b70      	cmp	r3, #112	; 0x70
 800366e:	d804      	bhi.n	800367a <HAL_TIM_ConfigClockSource+0x7e>
 8003670:	2b50      	cmp	r3, #80	; 0x50
 8003672:	d033      	beq.n	80036dc <HAL_TIM_ConfigClockSource+0xe0>
 8003674:	2b60      	cmp	r3, #96	; 0x60
 8003676:	d041      	beq.n	80036fc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003678:	e06a      	b.n	8003750 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800367a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800367e:	d066      	beq.n	800374e <HAL_TIM_ConfigClockSource+0x152>
 8003680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003684:	d017      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003686:	e063      	b.n	8003750 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6818      	ldr	r0, [r3, #0]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	6899      	ldr	r1, [r3, #8]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f000 fc84 	bl	8003fa4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	609a      	str	r2, [r3, #8]
      break;
 80036b4:	e04c      	b.n	8003750 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	6899      	ldr	r1, [r3, #8]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f000 fc6d 	bl	8003fa4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036d8:	609a      	str	r2, [r3, #8]
      break;
 80036da:	e039      	b.n	8003750 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6818      	ldr	r0, [r3, #0]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	6859      	ldr	r1, [r3, #4]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	461a      	mov	r2, r3
 80036ea:	f000 fb2b 	bl	8003d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2150      	movs	r1, #80	; 0x50
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 fc3a 	bl	8003f6e <TIM_ITRx_SetConfig>
      break;
 80036fa:	e029      	b.n	8003750 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6818      	ldr	r0, [r3, #0]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	6859      	ldr	r1, [r3, #4]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	461a      	mov	r2, r3
 800370a:	f000 fb87 	bl	8003e1c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2160      	movs	r1, #96	; 0x60
 8003714:	4618      	mov	r0, r3
 8003716:	f000 fc2a 	bl	8003f6e <TIM_ITRx_SetConfig>
      break;
 800371a:	e019      	b.n	8003750 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6818      	ldr	r0, [r3, #0]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	6859      	ldr	r1, [r3, #4]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	461a      	mov	r2, r3
 800372a:	f000 fb0b 	bl	8003d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2140      	movs	r1, #64	; 0x40
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fc1a 	bl	8003f6e <TIM_ITRx_SetConfig>
      break;
 800373a:	e009      	b.n	8003750 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4619      	mov	r1, r3
 8003746:	4610      	mov	r0, r2
 8003748:	f000 fc11 	bl	8003f6e <TIM_ITRx_SetConfig>
      break;
 800374c:	e000      	b.n	8003750 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800374e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
	...

080037bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a40      	ldr	r2, [pc, #256]	; (80038d0 <TIM_Base_SetConfig+0x114>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d013      	beq.n	80037fc <TIM_Base_SetConfig+0x40>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037da:	d00f      	beq.n	80037fc <TIM_Base_SetConfig+0x40>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a3d      	ldr	r2, [pc, #244]	; (80038d4 <TIM_Base_SetConfig+0x118>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d00b      	beq.n	80037fc <TIM_Base_SetConfig+0x40>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a3c      	ldr	r2, [pc, #240]	; (80038d8 <TIM_Base_SetConfig+0x11c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d007      	beq.n	80037fc <TIM_Base_SetConfig+0x40>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a3b      	ldr	r2, [pc, #236]	; (80038dc <TIM_Base_SetConfig+0x120>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d003      	beq.n	80037fc <TIM_Base_SetConfig+0x40>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a3a      	ldr	r2, [pc, #232]	; (80038e0 <TIM_Base_SetConfig+0x124>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d108      	bne.n	800380e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003802:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a2f      	ldr	r2, [pc, #188]	; (80038d0 <TIM_Base_SetConfig+0x114>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d02b      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800381c:	d027      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a2c      	ldr	r2, [pc, #176]	; (80038d4 <TIM_Base_SetConfig+0x118>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d023      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a2b      	ldr	r2, [pc, #172]	; (80038d8 <TIM_Base_SetConfig+0x11c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d01f      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a2a      	ldr	r2, [pc, #168]	; (80038dc <TIM_Base_SetConfig+0x120>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d01b      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a29      	ldr	r2, [pc, #164]	; (80038e0 <TIM_Base_SetConfig+0x124>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d017      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a28      	ldr	r2, [pc, #160]	; (80038e4 <TIM_Base_SetConfig+0x128>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d013      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a27      	ldr	r2, [pc, #156]	; (80038e8 <TIM_Base_SetConfig+0x12c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00f      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a26      	ldr	r2, [pc, #152]	; (80038ec <TIM_Base_SetConfig+0x130>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00b      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a25      	ldr	r2, [pc, #148]	; (80038f0 <TIM_Base_SetConfig+0x134>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d007      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a24      	ldr	r2, [pc, #144]	; (80038f4 <TIM_Base_SetConfig+0x138>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d003      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a23      	ldr	r2, [pc, #140]	; (80038f8 <TIM_Base_SetConfig+0x13c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d108      	bne.n	8003880 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	4313      	orrs	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	4313      	orrs	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a0a      	ldr	r2, [pc, #40]	; (80038d0 <TIM_Base_SetConfig+0x114>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d003      	beq.n	80038b4 <TIM_Base_SetConfig+0xf8>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a0c      	ldr	r2, [pc, #48]	; (80038e0 <TIM_Base_SetConfig+0x124>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d103      	bne.n	80038bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	615a      	str	r2, [r3, #20]
}
 80038c2:	bf00      	nop
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40010000 	.word	0x40010000
 80038d4:	40000400 	.word	0x40000400
 80038d8:	40000800 	.word	0x40000800
 80038dc:	40000c00 	.word	0x40000c00
 80038e0:	40010400 	.word	0x40010400
 80038e4:	40014000 	.word	0x40014000
 80038e8:	40014400 	.word	0x40014400
 80038ec:	40014800 	.word	0x40014800
 80038f0:	40001800 	.word	0x40001800
 80038f4:	40001c00 	.word	0x40001c00
 80038f8:	40002000 	.word	0x40002000

080038fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	f023 0201 	bic.w	r2, r3, #1
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f023 0303 	bic.w	r3, r3, #3
 8003932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	4313      	orrs	r3, r2
 800393c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f023 0302 	bic.w	r3, r3, #2
 8003944:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	4313      	orrs	r3, r2
 800394e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a20      	ldr	r2, [pc, #128]	; (80039d4 <TIM_OC1_SetConfig+0xd8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d003      	beq.n	8003960 <TIM_OC1_SetConfig+0x64>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a1f      	ldr	r2, [pc, #124]	; (80039d8 <TIM_OC1_SetConfig+0xdc>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d10c      	bne.n	800397a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f023 0308 	bic.w	r3, r3, #8
 8003966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	4313      	orrs	r3, r2
 8003970:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f023 0304 	bic.w	r3, r3, #4
 8003978:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a15      	ldr	r2, [pc, #84]	; (80039d4 <TIM_OC1_SetConfig+0xd8>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d003      	beq.n	800398a <TIM_OC1_SetConfig+0x8e>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a14      	ldr	r2, [pc, #80]	; (80039d8 <TIM_OC1_SetConfig+0xdc>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d111      	bne.n	80039ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003990:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003998:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	621a      	str	r2, [r3, #32]
}
 80039c8:	bf00      	nop
 80039ca:	371c      	adds	r7, #28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	40010000 	.word	0x40010000
 80039d8:	40010400 	.word	0x40010400

080039dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	f023 0210 	bic.w	r2, r3, #16
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	021b      	lsls	r3, r3, #8
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f023 0320 	bic.w	r3, r3, #32
 8003a26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a22      	ldr	r2, [pc, #136]	; (8003ac0 <TIM_OC2_SetConfig+0xe4>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d003      	beq.n	8003a44 <TIM_OC2_SetConfig+0x68>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a21      	ldr	r2, [pc, #132]	; (8003ac4 <TIM_OC2_SetConfig+0xe8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d10d      	bne.n	8003a60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	011b      	lsls	r3, r3, #4
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a17      	ldr	r2, [pc, #92]	; (8003ac0 <TIM_OC2_SetConfig+0xe4>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d003      	beq.n	8003a70 <TIM_OC2_SetConfig+0x94>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a16      	ldr	r2, [pc, #88]	; (8003ac4 <TIM_OC2_SetConfig+0xe8>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d113      	bne.n	8003a98 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	621a      	str	r2, [r3, #32]
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	40010000 	.word	0x40010000
 8003ac4:	40010400 	.word	0x40010400

08003ac8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 0303 	bic.w	r3, r3, #3
 8003afe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a21      	ldr	r2, [pc, #132]	; (8003ba8 <TIM_OC3_SetConfig+0xe0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d003      	beq.n	8003b2e <TIM_OC3_SetConfig+0x66>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a20      	ldr	r2, [pc, #128]	; (8003bac <TIM_OC3_SetConfig+0xe4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d10d      	bne.n	8003b4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	021b      	lsls	r3, r3, #8
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a16      	ldr	r2, [pc, #88]	; (8003ba8 <TIM_OC3_SetConfig+0xe0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d003      	beq.n	8003b5a <TIM_OC3_SetConfig+0x92>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a15      	ldr	r2, [pc, #84]	; (8003bac <TIM_OC3_SetConfig+0xe4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d113      	bne.n	8003b82 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	621a      	str	r2, [r3, #32]
}
 8003b9c:	bf00      	nop
 8003b9e:	371c      	adds	r7, #28
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	40010000 	.word	0x40010000
 8003bac:	40010400 	.word	0x40010400

08003bb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	021b      	lsls	r3, r3, #8
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	031b      	lsls	r3, r3, #12
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a12      	ldr	r2, [pc, #72]	; (8003c54 <TIM_OC4_SetConfig+0xa4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d003      	beq.n	8003c18 <TIM_OC4_SetConfig+0x68>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a11      	ldr	r2, [pc, #68]	; (8003c58 <TIM_OC4_SetConfig+0xa8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d109      	bne.n	8003c2c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	019b      	lsls	r3, r3, #6
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	621a      	str	r2, [r3, #32]
}
 8003c46:	bf00      	nop
 8003c48:	371c      	adds	r7, #28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	40010000 	.word	0x40010000
 8003c58:	40010400 	.word	0x40010400

08003c5c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
 8003c68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	f023 0201 	bic.w	r2, r3, #1
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4a28      	ldr	r2, [pc, #160]	; (8003d28 <TIM_TI1_SetConfig+0xcc>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d01b      	beq.n	8003cc2 <TIM_TI1_SetConfig+0x66>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c90:	d017      	beq.n	8003cc2 <TIM_TI1_SetConfig+0x66>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	4a25      	ldr	r2, [pc, #148]	; (8003d2c <TIM_TI1_SetConfig+0xd0>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d013      	beq.n	8003cc2 <TIM_TI1_SetConfig+0x66>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4a24      	ldr	r2, [pc, #144]	; (8003d30 <TIM_TI1_SetConfig+0xd4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00f      	beq.n	8003cc2 <TIM_TI1_SetConfig+0x66>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4a23      	ldr	r2, [pc, #140]	; (8003d34 <TIM_TI1_SetConfig+0xd8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d00b      	beq.n	8003cc2 <TIM_TI1_SetConfig+0x66>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	4a22      	ldr	r2, [pc, #136]	; (8003d38 <TIM_TI1_SetConfig+0xdc>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d007      	beq.n	8003cc2 <TIM_TI1_SetConfig+0x66>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4a21      	ldr	r2, [pc, #132]	; (8003d3c <TIM_TI1_SetConfig+0xe0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d003      	beq.n	8003cc2 <TIM_TI1_SetConfig+0x66>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	4a20      	ldr	r2, [pc, #128]	; (8003d40 <TIM_TI1_SetConfig+0xe4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d101      	bne.n	8003cc6 <TIM_TI1_SetConfig+0x6a>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <TIM_TI1_SetConfig+0x6c>
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d008      	beq.n	8003cde <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f023 0303 	bic.w	r3, r3, #3
 8003cd2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	e003      	b.n	8003ce6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f043 0301 	orr.w	r3, r3, #1
 8003ce4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f023 030a 	bic.w	r3, r3, #10
 8003d00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f003 030a 	and.w	r3, r3, #10
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	621a      	str	r2, [r3, #32]
}
 8003d1a:	bf00      	nop
 8003d1c:	371c      	adds	r7, #28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40010000 	.word	0x40010000
 8003d2c:	40000400 	.word	0x40000400
 8003d30:	40000800 	.word	0x40000800
 8003d34:	40000c00 	.word	0x40000c00
 8003d38:	40010400 	.word	0x40010400
 8003d3c:	40014000 	.word	0x40014000
 8003d40:	40001800 	.word	0x40001800

08003d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	f023 0201 	bic.w	r2, r3, #1
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	011b      	lsls	r3, r3, #4
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f023 030a 	bic.w	r3, r3, #10
 8003d80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	621a      	str	r2, [r3, #32]
}
 8003d96:	bf00      	nop
 8003d98:	371c      	adds	r7, #28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b087      	sub	sp, #28
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	60f8      	str	r0, [r7, #12]
 8003daa:	60b9      	str	r1, [r7, #8]
 8003dac:	607a      	str	r2, [r7, #4]
 8003dae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	f023 0210 	bic.w	r2, r3, #16
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	021b      	lsls	r3, r3, #8
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003de0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	031b      	lsls	r3, r3, #12
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003df4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	621a      	str	r2, [r3, #32]
}
 8003e10:	bf00      	nop
 8003e12:	371c      	adds	r7, #28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	f023 0210 	bic.w	r2, r3, #16
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e46:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	031b      	lsls	r3, r3, #12
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	011b      	lsls	r3, r3, #4
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	621a      	str	r2, [r3, #32]
}
 8003e70:	bf00      	nop
 8003e72:	371c      	adds	r7, #28
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
 8003e88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f023 0303 	bic.w	r3, r3, #3
 8003ea8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eb8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	011b      	lsls	r3, r3, #4
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003ecc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	021b      	lsls	r3, r3, #8
 8003ed2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	621a      	str	r2, [r3, #32]
}
 8003ee8:	bf00      	nop
 8003eea:	371c      	adds	r7, #28
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
 8003f00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f20:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	021b      	lsls	r3, r3, #8
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f32:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	031b      	lsls	r3, r3, #12
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003f46:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	031b      	lsls	r3, r3, #12
 8003f4c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	621a      	str	r2, [r3, #32]
}
 8003f62:	bf00      	nop
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b085      	sub	sp, #20
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
 8003f76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f043 0307 	orr.w	r3, r3, #7
 8003f90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	609a      	str	r2, [r3, #8]
}
 8003f98:	bf00      	nop
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
 8003fb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	021a      	lsls	r2, r3, #8
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	609a      	str	r2, [r3, #8]
}
 8003fd8:	bf00      	nop
 8003fda:	371c      	adds	r7, #28
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f003 031f 	and.w	r3, r3, #31
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a1a      	ldr	r2, [r3, #32]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	43db      	mvns	r3, r3
 8004006:	401a      	ands	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a1a      	ldr	r2, [r3, #32]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f003 031f 	and.w	r3, r3, #31
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	fa01 f303 	lsl.w	r3, r1, r3
 800401c:	431a      	orrs	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	621a      	str	r2, [r3, #32]
}
 8004022:	bf00      	nop
 8004024:	371c      	adds	r7, #28
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
	...

08004030 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004044:	2302      	movs	r3, #2
 8004046:	e05a      	b.n	80040fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800406e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a21      	ldr	r2, [pc, #132]	; (800410c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d022      	beq.n	80040d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004094:	d01d      	beq.n	80040d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a1d      	ldr	r2, [pc, #116]	; (8004110 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d018      	beq.n	80040d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a1b      	ldr	r2, [pc, #108]	; (8004114 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d013      	beq.n	80040d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a1a      	ldr	r2, [pc, #104]	; (8004118 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d00e      	beq.n	80040d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a18      	ldr	r2, [pc, #96]	; (800411c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d009      	beq.n	80040d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a17      	ldr	r2, [pc, #92]	; (8004120 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d004      	beq.n	80040d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a15      	ldr	r2, [pc, #84]	; (8004124 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d10c      	bne.n	80040ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40010000 	.word	0x40010000
 8004110:	40000400 	.word	0x40000400
 8004114:	40000800 	.word	0x40000800
 8004118:	40000c00 	.word	0x40000c00
 800411c:	40010400 	.word	0x40010400
 8004120:	40014000 	.word	0x40014000
 8004124:	40001800 	.word	0x40001800

08004128 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <__libc_init_array>:
 8004150:	b570      	push	{r4, r5, r6, lr}
 8004152:	4e0d      	ldr	r6, [pc, #52]	; (8004188 <__libc_init_array+0x38>)
 8004154:	4c0d      	ldr	r4, [pc, #52]	; (800418c <__libc_init_array+0x3c>)
 8004156:	1ba4      	subs	r4, r4, r6
 8004158:	10a4      	asrs	r4, r4, #2
 800415a:	2500      	movs	r5, #0
 800415c:	42a5      	cmp	r5, r4
 800415e:	d109      	bne.n	8004174 <__libc_init_array+0x24>
 8004160:	4e0b      	ldr	r6, [pc, #44]	; (8004190 <__libc_init_array+0x40>)
 8004162:	4c0c      	ldr	r4, [pc, #48]	; (8004194 <__libc_init_array+0x44>)
 8004164:	f000 f820 	bl	80041a8 <_init>
 8004168:	1ba4      	subs	r4, r4, r6
 800416a:	10a4      	asrs	r4, r4, #2
 800416c:	2500      	movs	r5, #0
 800416e:	42a5      	cmp	r5, r4
 8004170:	d105      	bne.n	800417e <__libc_init_array+0x2e>
 8004172:	bd70      	pop	{r4, r5, r6, pc}
 8004174:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004178:	4798      	blx	r3
 800417a:	3501      	adds	r5, #1
 800417c:	e7ee      	b.n	800415c <__libc_init_array+0xc>
 800417e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004182:	4798      	blx	r3
 8004184:	3501      	adds	r5, #1
 8004186:	e7f2      	b.n	800416e <__libc_init_array+0x1e>
 8004188:	080041f8 	.word	0x080041f8
 800418c:	080041f8 	.word	0x080041f8
 8004190:	080041f8 	.word	0x080041f8
 8004194:	080041fc 	.word	0x080041fc

08004198 <memset>:
 8004198:	4402      	add	r2, r0
 800419a:	4603      	mov	r3, r0
 800419c:	4293      	cmp	r3, r2
 800419e:	d100      	bne.n	80041a2 <memset+0xa>
 80041a0:	4770      	bx	lr
 80041a2:	f803 1b01 	strb.w	r1, [r3], #1
 80041a6:	e7f9      	b.n	800419c <memset+0x4>

080041a8 <_init>:
 80041a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041aa:	bf00      	nop
 80041ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ae:	bc08      	pop	{r3}
 80041b0:	469e      	mov	lr, r3
 80041b2:	4770      	bx	lr

080041b4 <_fini>:
 80041b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b6:	bf00      	nop
 80041b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ba:	bc08      	pop	{r3}
 80041bc:	469e      	mov	lr, r3
 80041be:	4770      	bx	lr
